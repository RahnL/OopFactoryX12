[
  {
    "Id": "1345221",
    "ThreadId": "578395",
    "Html": "I'm experimenting with the Acknowledgement Service to create the 999 functional acknowledgements.\r<br />\n<br />\nThe file I'm trying to process is an 834 file whose contents are as follows... just one subscriber (INS) with one plan (HD):<br />\n<pre><code>ISA*00*          *00*          *ZZ*100697         *ZZ*XYZCO          *150114*1728*^*00501*000012345*1*P*:~\nGS*BE*100697*XYZCO*20150114*1728*1*X*005010X220A1~\nST*834*0001*005010X220A1~\nBGN*00*1*20150114*1728*PT***2~\nN1*P5*ABC Company*ZZ*100523~\nN1*IN*XYZ Company*ZZ*XYZCO~\nINS*Y*18*021**A~\nREF*0F*666224444~\nDTP*336*D8*20141001~\nNM1*IL*1*Smith*John*A***34*666224444~\nPER*IP**HP*6503426882*CP*4158231776*EM*jsmith@gmail.com~\nN3*100 Main Street #3~\nN4*San Francisco*CA*941071023~\nDMG*D8*19590916*M*M~\nHD*021****EMP~\nDTP*348*D8*20150201~\nREF*1L*000121~\nLX*1~\nNM1*SV*1******SV*12345~\nSE*18*0001~\nGE*1*1~\nIEA*1*000012345~</code></pre>\n\nThe 999 that gets generated is this:<br />\n<pre><code>ISA*00*          *00*          *ZZ*COPOWER        *ZZ*100697         *150122*1400*U*00501*000000999*1*P*:~\n  GS*FA*COPOWER**20150122*1400*99*X*005010X231A1~\n    ST*999*0001*005010X231A1~\n      AK1*BE*1*005010X220A1~\n      AK2*834*0001*005010X220A1~\n        IK3*REF*1**3~\n        IK3*DTP*1**3~\n        IK3*QTY*1**3~\n        IK3*N1*2**I7~\n        IK3*NM1*7*2000*I7~\n        IK3*NM1*7*2000*I7~\n        IK3*NM1*7*2000*I7~\n        IK3*NM1*7*2000*I7~\n        IK3*NM1*7*2000*I7~\n        IK3*NM1*7*2000*I7~\n        IK3*NM1*7*2000*I7~\n        IK3*DSB*7*2000*I7~\n        IK3*LC*7*2000*I7~\n        IK3*FSA*7*2000*I7~\n        IK3*RP*7*2000*I7~\n        IK3*LS*7*2000*I7~\n        IK3*EC*8*2100A*3~\n        IK3*ICM*8*2100A*3~\n        IK3*AMT*8*2100A*3~\n        IK3*HLH*8*2100A*3~\n        IK3*LUI*8*2100A*3~\n        IK3*AMT*13*2300*3~\n        IK3*IDC*13*2300*3~\n        IK3*COB*15*2300*I7~\n        IK3*N3*16*2310*3~\n        IK3*N4*16*2310*3~\n        IK3*PER*16*2310*3~\n        IK3*PLA*16*2310*3~\n        IK5*E*2*5~\n      AK9*A*1*1*1~\n    SE*34*0001~\n  GE*1*99~\nIEA*1*000000999~</code></pre>\n\nTwo questions... \r<br />\n<br />\nI'm getting an <code>IK5*E*2*5</code>, which indicates that I'm missing a Transaction Set Trailer.  But the SE is right there in my original file.  I'm wondering if it's getting confused by the Loops within Loops (Loop 2300 (HD) contains Loop 2310 (LX and NM1) and Loop 2320 (COB), which contains Loop 2330 (NM1)).\r<br />\n<br />\nAlso, I'm surprised at all the IK3 error segments.  The first IK3's are saying that the REF and DTP and QTY segments are required segments, but in reality, they are not.... they are optional segments according to the 005010 specs for the 834.  Same with the I7 errors about the loops saying they occur under the minimum times... these are optional loops, not mandatory loops.\r<br />\n<br />\nHas anyone else successfully created 999's for an 834?\r<br />\n<br />\nThanks...\r<br />\n<br />\n--Brad<br />\n",
    "PostedDate": "2015-01-22T14:17:50.607-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1345230",
    "ThreadId": "578395",
    "Html": "I managed to get rid of all the IK3 error segments by changing the Ansi-834-5010Specifications.xml so that the various optional loops and segments were marked as Usage=&quot;Situational&quot;.\r<br />\n<br />\nBut I still can't get rid of the <code>IK5*E*2</code> ... It's not &quot;seeing&quot; the SE Transaction Set Trailer in my file.  I'll try stepping through the code and see why.<br />\n",
    "PostedDate": "2015-01-22T14:51:58.527-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1345234",
    "ThreadId": "578395",
    "Html": "Well, that was easy.\r<br />\n<br />\nApparently there's a bug in X12StreamReader.ReadNextTransaction().\r<br />\n<br />\nIn its loop, it's gathering all the segments of the transaction.  But it neglects to include the SE Trailer in the transaction string.\r<br />\n<br />\nI amended the code like so:<br />\n<pre><code>            do\n            {\n                switch (segmentId)\n                {\n                    case &quot;ISA&quot;:\n                        _isaSegment = segmentString + _delimiters.SegmentTerminator;\n                        break;\n                    case &quot;GS&quot;:\n                        _gsSegment = segmentString + _delimiters.SegmentTerminator;\n                        break;\n                    case &quot;IEA&quot;:\n                    case &quot;GE&quot;:\n                        break;\n                    default:\n                        if (segmentId == &quot;ST&quot;)\n                            _transactionCode = SplitSegment(segmentString)[1];\n                        segments.Append(segmentString);\n                        segments.Append(_delimiters.SegmentTerminator);\n                        break;\n                }\n                segmentString = ReadNextSegment();\n                segmentId = ReadSegmentId(segmentString);\n                //Brad-Jan22,2015: Make sure the SE is appended to the list of segments\n                if (!string.IsNullOrEmpty(segmentString) &amp;&amp; segmentId == &quot;SE&quot;)\n                {\n                    segments.Append(segmentString);\n                    segments.Append(_delimiters.SegmentTerminator);\n                }\n            } while (!string.IsNullOrEmpty(segmentString) &amp;&amp; segmentId != &quot;SE&quot;); // transaction trailer segment</code></pre>\n\nProblem solved.<br />\n",
    "PostedDate": "2015-01-22T15:13:14.467-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]