[
  {
    "Id": "840355",
    "ThreadId": "356976",
    "Html": "\r\n<p>Can you please tell me what is the best way of parsing 271 response records? I need to parse and take out each elements. One way I have used is first serializing to XML and put it into 'XPathDocument'. Then use 'XPathNavigator' to query the required element.\r\n My worry here is, performance. Is there a better way of doing?</p>\r\n",
    "PostedDate": "2012-05-24T04:32:32.22-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1067685",
    "ThreadId": "356976",
    "Html": "Hi,\r<br />\n<br />\nDid you ever receive any answers for your question? \r<br />\n<br />\nI'm no expert, I've just recently started using this library myself and I'm working directly with the EligibilityBenefitDocument object which is returned from EligibilityTransformationService.Transform271ToBenefitResponse(Stream stream) method. \r<br />\n<br />\nI am actually at the stage of saving this data now and I am curious as to what you have come up with. Below is just some code I am using to test this now;<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Green;\">//.......other using statements</span>\n<span style=\"color:Blue;\">using</span> OopFactory.X12.Transformations;\n<span style=\"color:Blue;\">using</span> OopFactory.X12.Hipaa.Eligibility.Services;\n<span style=\"color:Blue;\">using</span> OopFactory.X12.Hipaa.Eligibility;\n<span style=\"color:Blue;\">using</span> OopFactory.X12.Parsing;\n\n<span style=\"color:Blue;\">namespace</span> EdiServices.Service.InsuranceServices\n{\n  <span style=\"color:Blue;\">public</span> <span style=\"color:Blue;\">class</span> EligibilityRequestService \n  {\n \n    <span style=\"color:Blue;\">public</span> JObject RunTransaction(<span style=\"color:Blue;\">int</span> idOfRecordToConvertTo270)\n    {\n        <span style=\"color:Green;\">//some calls to db or w/e to help create appropriate 270 Request using idOfRecordToConvertTo270</span>\n        <span style=\"color:Green;\">//.......</span>\n        <span style=\"color:Green;\">//make call to clearinghouse etc to pass 270 Request and get ediFile response as string</span>\n        <span style=\"color:Green;\">//.......</span>\n        <span style=\"color:Green;\">//convert string to stream</span>\n        <span style=\"color:Blue;\">byte</span>[] byteArray = Encoding.UTF8.GetBytes(ediFileString);\n        MemoryStream ediFile = <span style=\"color:Blue;\">new</span> MemoryStream(byteArray);\n\n        <span style=\"color:Green;\">//make call to EligibilityTransformationService.Transform271ToBenefitResponse(ediFile) method and get EligibilityBenefitDocument</span>\n        EligibilityTransformationService service = <span style=\"color:Blue;\">new</span> EligibilityTransformationService();\n        EligibilityBenefitDocument benefitDoc = service.Transform271ToBenefitResponse(ediFile);\n\n        <span style=\"color:Green;\">//Extract Subscriber info</span>\n        <span style=\"color:Blue;\">var</span> subscriberInformation = benefitDoc.EligibilityBenefitResponses[0].Subscriber;\n        <span style=\"color:Blue;\">string</span> dob = subscriberInformation.DateOfBirth.Value.ToString(<span style=\"color:#A31515;\">&quot;MM/dd/yyyy&quot;</span>);\n        Console.WriteLine(dob);\n\n         <span style=\"color:Green;\">//Benefit Information</span>\n       List&lt;EligibilityBenefitInformation&gt; benefitInfos = benefitDoc.EligibilityBenefitResponses[0].BenefitInfos;\n       <span style=\"color:Blue;\">for</span>( <span style=\"color:Blue;\">int</span> i=0; i &lt; benefitInfos.Count; i++ ) \n       {\n         Console.WriteLine(benefitInfos[i].InfoType !=<span style=\"color:Blue;\">null</span> ? benefitInfos[i].InfoType.Code : String.Empty); <span style=\"color:Green;\">// &quot;C&quot;</span>\n         Console.WriteLine(benefitInfos[i].InfoType.Description); <span style=\"color:Green;\">//&quot;Deductible&quot;</span>\n         Console.WriteLine(benefitInfos[i].Amount); <span style=\"color:Green;\">// 0    </span>\n         Console.WriteLine(benefitInfos[i].CoverageLevel !=<span style=\"color:Blue;\">null</span> ? benefitInfos[i].CoverageLevel.Code : String.Empty); <span style=\"color:Green;\">// &quot;IND&quot;</span>\n         Console.WriteLine(benefitInfos[i].CoverageLevel !=<span style=\"color:Blue;\">null</span> ? benefitInfos[i].CoverageLevel.Description : String.Empty); <span style=\"color:Green;\">// &quot;Individual&quot;</span>\n       }\n\n       ediFile.Flush();\n       ediFile.Close();\n\n        <span style=\"color:Green;\">//you&#39;d probably want to pass benefitDoc to _SaveEligibilityDocumentDetails(benefitDoc) or w/e    </span>\n        <span style=\"color:Green;\">//but for this example return benefitDoc as JObject to ApiController or something</span>\n       <span style=\"color:Blue;\">return</span> JObject.FromObject(benefitDoc);\n      }\n   }\n   <span style=\"color:Green;\">//Some other methods for this service................</span>\n}\r\n</pre></div>",
    "PostedDate": "2013-07-12T13:24:57.083-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1150274",
    "ThreadId": "356976",
    "Html": "You reply is of much use. In case some mandatory information is missing in request, then the response will have some error/message information with reason code and the missing information details. So how to parse a response with reject reason code and other message details\r<br />\n<br />\nAdvance Thanks,\r<br />\nRavi<br />\n",
    "PostedDate": "2014-01-07T00:06:14.153-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1150487",
    "ThreadId": "356976",
    "Html": "I'm glad it is helpful. Here is a snippet that I use to check if there is an error code;<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n<span style=\"color:Blue;\">private</span> <span style=\"color:Blue;\">bool</span> _ResponseContainsErrorCode(EligibilityBenefitResponse response)\n{\n    <span style=\"color:Blue;\">bool</span> containsErrorCode = <span style=\"color:Blue;\">false</span>;\n    \n    <span style=\"color:Green;\">//Loop through benefit response</span>\n    <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> i = 0; i &lt; response.BenefitInfos.Count; i++)\n    {\n        <span style=\"color:Green;\">//Check if any InfoType.Code == &quot;v&quot; which is error code</span>\n        <span style=\"color:Blue;\">if</span> (response.BenefitInfos[i].InfoType.Code.ToLower() == <span style=\"color:#A31515;\">&quot;v&quot;</span>)\n        {\n          containsErrorCode = <span style=\"color:Blue;\">true</span>;\n        }\n    }\n    \n    <span style=\"color:Blue;\">return</span> containsErrorCode;\n}\r\n</pre></div>You can gain access to the messages for this error code by checking the Messages array inside each response.BenefitInfos[i] (i.e., response.BenefitInfos[i].Messages). \r<br />\n<br />\nFor example;<br />\n<div style=\"color:Black;background-color:White;\"><pre>\r\n    ...\n    <span style=\"color:Green;\">//Loop through benefit response</span>\n    <span style=\"color:Blue;\">for</span> (<span style=\"color:Blue;\">int</span> i = 0; i &lt; response.BenefitInfos.Count; i++)\n    {\n        <span style=\"color:Green;\">//Check if any InfoType.Code == &quot;v&quot; which is error code</span>\n        <span style=\"color:Blue;\">if</span> (response.BenefitInfos[i].InfoType.Code.ToLower() == <span style=\"color:#A31515;\">&quot;v&quot;</span>)\n        {\n           <span style=\"color:Blue;\">if</span>(response.BenefitInfos[i].Messages.Count &gt; 0)\n           {\n              <span style=\"color:Green;\">//Do something with the messages</span>\n              List&lt;<span style=\"color:Blue;\">string</span>&gt; messages = response.BenefitInfos[i].Messages;\n              <span style=\"color:Blue;\">foreach</span>(<span style=\"color:Blue;\">string</span> message <span style=\"color:Blue;\">in</span> messages)\n              {\n                 System.Console.WriteLine(message);\n              }\n           }\n        }\n    }\n   ...\r\n</pre></div>Let me know if you have further questions.\r<br />\nTim<br />\n",
    "PostedDate": "2014-01-07T08:28:44.543-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]