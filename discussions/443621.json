[
  {
    "Id": "1043462",
    "ThreadId": "443621",
    "Html": "I'm trying to take a file and split it into separate files by loop 2300, essentially using the code below.\r<br />\n<br />\nIs it valid to have an ST* but not a corresponding SE* or is there an issue with my code?\r<br />\n<br />\nIf I try to call AcknowledgeTransactions on the unbundled file, I get this error, but if I manually edit the file and add the SE* segment, I don't get the error.<br />\n<pre><code>System.IndexOutOfRangeException was unhandled\n  HResult=-2146233080\n  Message=Index was outside the bounds of the array.\n  Source=OopFactory.X12.Validation\n  StackTrace:\n       at OopFactory.X12.Validation.X12AcknowledgmentService.AcknowledgeTransaction(X12StreamReader reader, String functionalCode, String versionIdentifierCode, String transaction) in c:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\OopFactory.X12.Validation\\X12AcknowledgmentService.cs:line 77\n       at OopFactory.X12.Validation.X12AcknowledgmentService.AcknowledgeTransactions(Stream x12Stream, Encoding encoding) in c:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\OopFactory.X12.Validation\\X12AcknowledgmentService.cs:line 63\n       at OopFactory.X12.Validation.X12AcknowledgmentService.AcknowledgeTransactions(Stream x12Stream) in c:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\OopFactory.X12.Validation\\X12AcknowledgmentService.cs:line 33\n       at X12Viewer.Form1.ParseFile() in c:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\X12Viewer\\Form1.cs:line 71\n       at X12Viewer.Form1.button1_Click(Object sender, EventArgs e) in c:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\X12Viewer\\Form1.cs:line 28\n       at System.Windows.Forms.Control.OnClick(EventArgs e)\n       at System.Windows.Forms.Button.OnClick(EventArgs e)\n       at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)\n       at System.Windows.Forms.Control.WmMouseUp(Message&amp; m, MouseButtons button, Int32 clicks)\n       at System.Windows.Forms.Control.WndProc(Message&amp; m)\n       at System.Windows.Forms.ButtonBase.WndProc(Message&amp; m)\n       at System.Windows.Forms.Button.WndProc(Message&amp; m)\n       at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m)\n       at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m)\n       at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\n       at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp; msg)\n       at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentID, Int32 reason, Int32 pvLoopData)\n       at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)\n       at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)\n       at System.Windows.Forms.Application.Run(Form mainForm)\n       at X12Viewer.Program.Main() in c:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\X12Viewer\\Program.cs:line 18\n       at System.AppDomain._nExecuteAssembly(RuntimeAssembly assembly, String[] args)\n       at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)\n       at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()\n       at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\n       at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\n       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n       at System.Threading.ThreadHelper.ThreadStart()\n  InnerException: \n</code></pre>\n\nHere are links to the de-identified source file and one of the unbundled files.\r<br />\nSource - <a href=\"https://www.dropbox.com/s/r6rffgpfu3v0xvt/CLAIMS0228.NZ_out.837\" rel=\"nofollow\">https://www.dropbox.com/s/r6rffgpfu3v0xvt/CLAIMS0228.NZ_out.837</a>\r<br />\nUnbundled - <a href=\"https://www.dropbox.com/s/d4il7oweawg7tbq/CLAIMS0228.NZ.837_001_out.837\" rel=\"nofollow\">https://www.dropbox.com/s/d4il7oweawg7tbq/CLAIMS0228.NZ.837_001_out.837</a><br />\n<pre><code>        private void SplitClaims()\n        {\n            string x12Filename = txtFile.Text;\n\n            FileStream fsClaimFile = new FileStream(x12Filename, FileMode.Open, FileAccess.Read);\n            fsClaimFile.Position = 0;\n            X12Parser parser = new X12Parser(new SpecificationFinder(), true, new char[] { '\\x1A' });\n\n            string splitLoopId = &quot;2300&quot;; //Split on Loop 2300 so each claim is in a separate file\n            string splitFilenameString = &quot;{0}\\\\{1}_{2:000}{3}&quot;;\n            string outputDir = Path.GetDirectoryName(x12Filename);\n\n            FileInfo inputFile = new FileInfo(x12Filename);\n            List&lt;Interchange&gt; list = new List&lt;Interchange&gt;();\n\n            X12StreamReader reader = new X12StreamReader(fsClaimFile, Encoding.UTF8, new char[] { '\\x1A' });\n            X12FlatTransaction transaction = reader.ReadNextTransaction();\n            while (!string.IsNullOrEmpty(transaction.Transactions.First()))\n            {\n                string x12 = transaction.ToString();\n                var interchange = parser.ParseMultiple(x12).First();\n                if (splitLoopId == &quot;ST&quot;)\n                    list.Add(interchange);\n                else\n                {\n                    list.AddRange(parser.UnbundleByLoop(interchange, splitLoopId));\n                }\n                transaction = reader.ReadNextTransaction();\n            }\n\n            for (int i = 0; i &lt; list.Count; i++)\n            {\n                string outputFilename = String.Format(splitFilenameString, outputDir, inputFile.Name, i + 1, inputFile.Extension);\n                using (FileStream outputFilestream = new FileStream(outputFilename, FileMode.Create, FileAccess.Write))\n                {\n                    using (StreamWriter writer = new StreamWriter(outputFilestream))\n                    {\n                        writer.Write(list[i].SerializeToX12(false));\n                        writer.Close();\n                    }\n                    outputFilestream.Close();\n                }\n            }\n        }</code></pre>\n\n",
    "PostedDate": "2013-05-14T09:42:09.29-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1086355",
    "ThreadId": "443621",
    "Html": "I encountered the same problem. I found the issue to be the X12StreamReader.ReadNextTransaction. My fix was to append the SE once the loop is complete:<br />\n<pre><code>public X12FlatTransaction ReadNextTransaction()\n        {\n            StringBuilder segments = new StringBuilder();\n\n            string segmentString = ReadNextSegment();\n            string segmentId = ReadSegmentId(segmentString);\n            do\n            {\n                switch (segmentId)\n                {\n                    case &quot;ISA&quot;:\n                        _isaSegment = segmentString + _delimiters.SegmentTerminator;\n                        break;\n                    case &quot;GS&quot;:\n                        _gsSegment = segmentString + _delimiters.SegmentTerminator;\n                        break;\n                    case &quot;IEA&quot;:\n                    case &quot;GE&quot;:\n                        break;\n                    default:\n                        if (segmentId == &quot;ST&quot;)\n                            _transactionCode = SplitSegment(segmentString)[1];\n                        segments.Append(segmentString);\n                        segments.Append(_delimiters.SegmentTerminator);\n                        break;\n                }\n                segmentString = ReadNextSegment();\n                segmentId = ReadSegmentId(segmentString);\n            } while (!string.IsNullOrEmpty(segmentString) &amp;&amp; segmentId != &quot;SE&quot;); // transaction trailer segment\n\n           if (segmentId == &quot;SE&quot;)\n            {\n                segments.Append(segmentString);\n                segments.Append(_delimiters.SegmentTerminator);\n            }\n\n            return new X12FlatTransaction(\n                CurrentIsaSegment,\n                CurrentGsSegment,\n                segments.ToString());\n        }</code></pre>\n\n",
    "PostedDate": "2013-08-29T13:49:19.14-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]