[
  {
    "Id": "1491999",
    "ThreadId": "661068",
    "Html": "I am currently working on a project that involves creating a x12 835 file. I experienced an issue when trying to add the segment N1 on the loop 1000 A:\r<br />\n<br />\n//header code (message object)... etc\r<br />\n.\r<br />\n.\r<br />\n.\r<br />\nvar transaction = group.AddTransaction(&quot;835&quot;, &quot;0021&quot;);\r<br />\n.\r<br />\n.\r<br />\n.\r<br />\nvar loop1000AStart = transaction.AddLoop(new TypedLoopN1());_\r<br />\n<br />\nIs throwing the next error: \r<br />\n<br />\n__&quot;Loop N1* could not be added because it could not be found in the specification for ST&quot;__\r<br />\n<br />\nThe problem is in the class 'LoopContainer.cs' in this control sentence:\r<br />\n<br />\nif (matchingLoopSpecs.Where(ls =&gt; ls.StartingSegment.SegmentId == segment.SegmentId).Count() == 1)<br />\n<pre><code>                {\n                    spec = matchingLoopSpecs.Where(ls =&gt; ls.StartingSegment.SegmentId == segment.SegmentId).First();\n                }\n</code></pre>\n\nThe 835 specification involves N1 segment for loop1000A and 1000B, but in this condition we are forcing to retreieve only if the list contains one specification.\r<br />\n<br />\nI fixed this adding the next code to the method 'private LoopSpecification GetLoopSpecification(string segmentString)' in LoopContainer.cs\r<br />\n<br />\n private LoopSpecification GetLoopSpecification(string segmentString)<br />\n<pre><code>    {\n        Segment segment = new Segment(this, _delimiters, segmentString);\n\n        IList&lt;LoopSpecification&gt; matchingLoopSpecs = ((LoopContainer)this).AllowedChildLoops\n                    .Where(cl =&gt; cl.StartingSegment.SegmentId == segment.SegmentId).ToList();\n\n        if (matchingLoopSpecs == null || matchingLoopSpecs.Count == 0)\n        {\n            return null;\n        }\n        else if (segment.SegmentId == &quot;NM1&quot; || segment.SegmentId == &quot;N1&quot;)\n        {\n            LoopSpecification spec = matchingLoopSpecs.Where(ls =&gt; ls.StartingSegment.EntityIdentifiers.Any(ei =&gt; ei.Code.ToString() == segment.GetElement(1) || ei.Code.ToString() == &quot;Item&quot; + segment.GetElement(1))).FirstOrDefault();\n            if (spec == null)\n            {\n                if (matchingLoopSpecs.Where(ls =&gt; ls.StartingSegment.SegmentId == segment.SegmentId).Count() == 1)\n                {\n                    spec = matchingLoopSpecs.Where(ls =&gt; ls.StartingSegment.SegmentId == segment.SegmentId).First();\n                }\n                /*Added code Start*/\n                else\n                {\n                    if (matchingLoopSpecs.Where(ls =&gt; ls.StartingSegment.SegmentId == segment.SegmentId).Count() &gt;= 1 &amp;&amp; ((Transaction)segment.Parent).IdentifierCode == &quot;835&quot; &amp;&amp; segment.SegmentId == &quot;N1&quot;)\n                    {\n                        if (this.Loops.Count() == 0)\n                            spec = matchingLoopSpecs.Where(ls =&gt; ls.StartingSegment.SegmentId == segment.SegmentId &amp;&amp; ls.LoopId == &quot;1000A&quot;).First();\n                        else\n                            spec = matchingLoopSpecs.Where(ls =&gt; ls.StartingSegment.SegmentId == segment.SegmentId &amp;&amp; ls.LoopId == &quot;1000B&quot;).First();\n                    }\n                }\n                /*Added code End*/\n            }\n            return spec;\n        }\n        else\n        {\n            return matchingLoopSpecs.FirstOrDefault();\n        }\n    }\n</code></pre>\n\nI will appreciate you validate my solution or in better case, if you have any other more efficient solution  please let me know it.\r<br />\n<br />\nRegards.<br />\n",
    "PostedDate": "2017-01-31T11:12:51.457-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]