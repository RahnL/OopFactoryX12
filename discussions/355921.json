[
  {
    "Id": "836916",
    "ThreadId": "355921",
    "Html": "\r\n<p>Hi! Thanks for the fantastic tool! I'm trying to bundle a bunch of claims together (basically the reverse of the unbundle tool) and I'm not sure the best way to go about it. I have a collection of multiple 5010 837 Claims, but each individual claim is wrapped\r\n in its own ISA, GS, and ST wrappers (even for those going to the same payer). I'm trying to bundle them all together into one file since the ISA, GS, ST, Loop 1000A, Loop 1000B, and Loop 2000A are all exactly the same and only Loop 2000B and its &quot;children&quot;\r\n vary. I can load all the claims into memory using the Multiparse method and create the destination structure with correct ISA/GS/ST/1000A/1000B/2000A using the documented Interchange model methods.</p>\r\n<p>I'm just not sure of the most efficient way to transfer the Loop 2000Bs over from the source interchange list object into the destination interchange object? Do I need to crawl through the whole source claims 2000B loop and children and recreate each HL,\r\n Loop, Segment, and Element in the destination with the Interchange add methods or is there a simple way to just attach a copy of the Loop 200B HL object and its children objects onto the destination interchange. The second way seems easier and more efficient\r\n but I couldn't find a method to do this. I assume the SE segment &quot;Number of included segments&quot; would need to be updated as well, which is probably part of the problem. It just seems inefficient to recreate the source HL object piece by piece to attach it to\r\n the destination interchange object.</p>\r\n<p>Thanks for your help in how to proceed!</p>\r\n",
    "PostedDate": "2012-05-15T14:49:53.083-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "836927",
    "ThreadId": "355921",
    "Html": "<p>I might need to expose a new method for you, but I agree your second method sounds easier. &nbsp;This sounds like a good documentation page once I add the support for it.</p>\r\n<p>THE SE segment will automatically recalculate itself once you've added the new segments when you run the SerializeToX12 method on the Interchange object. &nbsp;I'll follow up tomorrow with some code snippets.</p>",
    "PostedDate": "2012-05-15T15:34:09.433-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "840114",
    "ThreadId": "355921",
    "Html": "\r\n<p>Hi! I found out that looping through the children segments, loops, and hierarchical loops wasn't as hard as I thought it would be with a recursive function. I've included the code to bundle a single file containing multiple claims, each wrapped in their\r\n own interchange/functional group/transaction into a single interchange/functional group/transaction with a single sender (Loop 1000A), receiver (Loop 1000B), and billing provider (HLoop 2000A) with repeating child HLoops 2000B for each claim. I hope this helps\r\n others out as much as your parser has helped us out! Thanks!</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:blue\">using</span> System;\r\n<span style=\"color:blue\">using</span> System.IO;\r\n<span style=\"color:blue\">using</span> System.Collections.Generic;\r\n<span style=\"color:blue\">using</span> System.Linq;\r\n<span style=\"color:blue\">using</span> System.Text;\r\n<span style=\"color:blue\">using</span> OopFactory.X12.Transformations;\r\n<span style=\"color:blue\">using</span> OopFactory.X12.Parsing;\r\n<span style=\"color:blue\">using</span> OopFactory.X12.Parsing.Model;\r\n\r\n\r\n<span style=\"color:blue\">namespace</span> BundleX12\r\n{\r\n    <span style=\"color:blue\">class</span> BundleX12Prog\r\n    {\r\n        <span style=\"color:blue\">static</span> <span style=\"color:blue\">void</span> Main(<span style=\"color:blue\">string</span>[] args)\r\n        {\r\n            <span style=\"color:blue\">if</span> (args.Length != 2)\r\n            {\r\n                System.Console.WriteLine(<span style=\"color:#a31515\">&quot;Run as BundleX12.exe 'InputX12File' 'OutputX12File'&quot;</span>);\r\n            }\r\n            <span style=\"color:blue\">else</span>\r\n            {\r\n                <span style=\"color:green\">// Load X12 File with multiple interchanges into inputInterchangeList object</span>\r\n                Stream ediFile = <span style=\"color:blue\">new</span> FileStream(args[0], FileMode.Open, FileAccess.Read);\r\n                <span style=\"color:blue\">var</span> parser = <span style=\"color:blue\">new</span> X12Parser();\r\n                List&lt;Interchange&gt; inputInterchangeList = parser.ParseMultiple(ediFile);\r\n                ediFile.Close();\r\n\r\n                <span style=\"color:green\">/* This program bundles list of 837 claims wrapped in their own input interchanges\r\n                 * into a single output interchange.\r\n                 * \r\n                 * Limitations: This program is only tested with 837 claims and is built around them.\r\n                 * \r\n                 * The values in the first interchange are used to fill in the ISA, GS\r\n                 * ST, BHT, Loop 1000A, Loop 1000B, Loop 2000A output structures. All 2000B and child loops\r\n                 * are copied and attached as children of the output Loop 2000A.\r\n                 * \r\n                 * No checking is done to make sure all of the following interchanges have the same\r\n                 * Loop 1000A Submitter Name, Loop 1000B Receiver Name, and Loop 2000A Billing Provider!\r\n                 * This is assumed to be true and this information is discarded for all processed input\r\n                 * interchanges after the first!\r\n                 * \r\n                 * The order at each level is assumed to be Segments, then Loops, then Hierarchical Levels.\r\n                 * If the order in the file is different, the output will be out of order!\r\n                 */</span>\r\n\r\n                <span style=\"color:blue\">if</span> (inputInterchangeList.Count == 1)\r\n                {\r\n                    Console.WriteLine(<span style=\"color:#a31515\">&quot;Error: There is only 1 interchange in the input!&quot;</span>);\r\n                    <span style=\"color:blue\">throw</span> <span style=\"color:blue\">new</span> System.ArgumentException(<span style=\"color:#a31515\">&quot;Input file must contain more than 1 interchange!&quot;</span>, <span style=\"color:#a31515\">&quot;args[0]&quot;</span>);\r\n                }\r\n\r\n                BundleX12 bundleX12 = <span style=\"color:blue\">new</span> BundleX12();\r\n                Interchange outputInterchange = bundleX12.BundleX12Interchanges(inputInterchangeList);\r\n\r\n                <span style=\"color:green\">// Convert outputInterchange into text and write out</span>\r\n                <span style=\"color:blue\">string</span> x12 = outputInterchange.SerializeToX12(<span style=\"color:blue\">false</span>);\r\n                TextWriter outFile = <span style=\"color:blue\">new</span> StreamWriter(args[1]);\r\n                outFile.Write(x12);\r\n                outFile.Close();\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    <span style=\"color:blue\">class</span> BundleX12\r\n    {\r\n        <span style=\"color:blue\">public</span> Interchange BundleX12Interchanges(List&lt;Interchange&gt; inputInterchangeList)\r\n        {\r\n            <span style=\"color:green\">// Create new single outputInterchange object to append all Transactions into and load elements from first Interchange of input interchanges</span>\r\n            Interchange outputInterchange = <span style=\"color:blue\">new</span> Interchange(inputInterchangeList[0].InterchangeDate, Convert.ToInt32(inputInterchangeList[0].GetElement(13)), (inputInterchangeList[0].GetElement(15) == <span style=\"color:#a31515\">&quot;P&quot;</span>));\r\n            <span style=\"color:green\">// ISA09 Date, ISA10 Time (doesn't work properly), ISA13 Interchange Control Number, ISA15 Usage Indicator for Production/Test set above when object created</span>\r\n            outputInterchange.AuthorInfoQualifier = inputInterchangeList[0].AuthorInfoQualifier; <span style=\"color:green\">// ISA01</span>\r\n            outputInterchange.AuthorInfo = inputInterchangeList[0].AuthorInfo;  <span style=\"color:green\">// ISA02</span>\r\n            outputInterchange.SecurityInfoQualifier = inputInterchangeList[0].SecurityInfoQualifier; <span style=\"color:green\">// ISA03</span>\r\n            outputInterchange.SecurityInfo = inputInterchangeList[0].SecurityInfo;  <span style=\"color:green\">// ISA04</span>\r\n            outputInterchange.InterchangeSenderIdQualifier = inputInterchangeList[0].InterchangeSenderIdQualifier; <span style=\"color:green\">// ISA05</span>\r\n            outputInterchange.InterchangeSenderId = inputInterchangeList[0].InterchangeSenderId; <span style=\"color:green\">// ISA06</span>\r\n            outputInterchange.InterchangeReceiverIdQualifier = inputInterchangeList[0].InterchangeReceiverIdQualifier; <span style=\"color:green\">// ISA07</span>\r\n            outputInterchange.InterchangeReceiverId = inputInterchangeList[0].InterchangeReceiverId; <span style=\"color:green\">// ISA08</span>\r\n            <span style=\"color:green\">// Set ISA11 Control Standards Identifier, ISA12 Control Version Number '00501', ISA14 Acknowledgment Request '1'</span>\r\n            outputInterchange.SetElement(10, inputInterchangeList[0].GetElement(10)); <span style=\"color:green\">// ISA10 Fix time manually since InterchangeDate property doesn't parse it correctly and resets it to 1200</span>\r\n            outputInterchange.SetElement(11, inputInterchangeList[0].GetElement(11)); <span style=\"color:green\">// ISA11</span>\r\n            outputInterchange.SetElement(12, inputInterchangeList[0].GetElement(12)); <span style=\"color:green\">// ISA12</span>\r\n            outputInterchange.SetElement(14, inputInterchangeList[0].GetElement(14)); <span style=\"color:green\">// ISA14</span>\r\n\r\n            <span style=\"color:green\">// Create new FunctionGroup (GS) in outputInterchange to contain all Transactions</span>\r\n            FunctionGroup outputFunctionGroup = outputInterchange.AddFunctionGroup(inputInterchangeList[0].FunctionGroups.First().FunctionalIdentifierCode, inputInterchangeList[0].FunctionGroups.First().Date, inputInterchangeList[0].FunctionGroups.First().ControlNumber, inputInterchangeList[0].FunctionGroups.First().VersionIdentifierCode); <span style=\"color:green\">// &quot;HC&quot; function ID code</span>\r\n            <span style=\"color:green\">// GS01 Functional Identifier Code, GS04 Date, GS05 Time (doesn't work properly), GS06 Function Group Control Number, GS08 Version Code all set above in object creation</span>\r\n            outputFunctionGroup.ApplicationSendersCode = inputInterchangeList[0].FunctionGroups.First().ApplicationSendersCode; <span style=\"color:green\">// GS02</span>\r\n            outputFunctionGroup.ApplicationReceiversCode = inputInterchangeList[0].FunctionGroups.First().ApplicationReceiversCode; <span style=\"color:green\">// GS03</span>\r\n            outputFunctionGroup.SetElement(5, inputInterchangeList[0].FunctionGroups.First().GetElement(5)); <span style=\"color:green\">// GS05 Fix time manually since FunctionGroup Date property doesn't parse it correctly and resets it to 0000</span>\r\n            outputFunctionGroup.ResponsibleAgencyCode = inputInterchangeList[0].FunctionGroups.First().ResponsibleAgencyCode; <span style=\"color:green\">// GS07</span>\r\n\r\n            <span style=\"color:green\">//Create new Transaction (ST) in outputInterchange to contain all Loops</span>\r\n            Transaction inputTransaction = inputInterchangeList[0].FunctionGroups.First().Transactions.First();\r\n            Transaction outputTransaction = outputFunctionGroup.AddTransaction(inputTransaction.GetElement(1), inputTransaction.ControlNumber); <span style=\"color:green\">// ST01 &quot;837&quot; and ST02 Control Number</span>\r\n            outputTransaction.SetElement(3, inputTransaction.GetElement(3)); <span style=\"color:green\">// ST03 &quot;005010X222&quot;</span>\r\n\r\n            <span style=\"color:green\">// Copy BHT segment, Loop 1000A Submitter, Loop 1000B Receiver from first input to destination</span>\r\n            CopySegmentsAndLoops(inputTransaction, outputTransaction, <span style=\"color:blue\">true</span>);\r\n            \r\n            <span style=\"color:green\">// Copy HL-1 2000A Billing/Pay-To Provider from first input to destination</span>\r\n            HierarchicalLoop outputBillingProviderHL = outputTransaction.AddHLoop(<span style=\"color:#a31515\">&quot;1&quot;</span>, <span style=\"color:#a31515\">&quot;20&quot;</span>, <span style=\"color:blue\">true</span>);\r\n            CopySegmentsAndLoops(inputTransaction.FindHLoop(<span style=\"color:#a31515\">&quot;1&quot;</span>), outputBillingProviderHL, <span style=\"color:blue\">true</span>);\r\n            <span style=\"color:blue\">int</span> outputHLIdIndex = 2; <span style=\"color:green\">// Tracks ID of next HL to add (current total of hierarchical loop IDs in output</span>\r\n            \r\n            <span style=\"color:green\">// Loop through all input interchanges, functional groups, and transactions and extract HL Loop 2000B and children and add to destination</span>\r\n            <span style=\"color:blue\">foreach</span> (Interchange inputInterchangeItem <span style=\"color:blue\">in</span> inputInterchangeList) <span style=\"color:green\">//Interchanges</span>\r\n            {\r\n                <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> functionGroupIndex = 0; functionGroupIndex &lt; inputInterchangeItem.FunctionGroups.Count(); functionGroupIndex&#43;&#43;) <span style=\"color:green\">//Functional Groups</span>\r\n                {\r\n                    <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> transactionIndex = 0; transactionIndex &lt; inputInterchangeItem.FunctionGroups.ElementAt(functionGroupIndex).Transactions.Count(); transactionIndex&#43;&#43;) <span style=\"color:green\">//Transactions</span>\r\n                    {\r\n                        <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> hLoopIndex = 0; hLoopIndex &lt; inputInterchangeItem.FunctionGroups.ElementAt(functionGroupIndex).Transactions.ElementAt(transactionIndex).HLoops.ElementAt(0).HLoops.Count(); hLoopIndex&#43;&#43;) <span style=\"color:green\">//HLoops</span>\r\n                        {\r\n                            HierarchicalLoop inputSubscriberHL = inputInterchangeItem.FunctionGroups.ElementAt(functionGroupIndex).Transactions.ElementAt(transactionIndex).HLoops.ElementAt(0).HLoops.ElementAt(hLoopIndex);\r\n                            outputHLIdIndex = CopyHLoop(inputSubscriberHL, outputBillingProviderHL, outputHLIdIndex, <span style=\"color:blue\">true</span>);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            <span style=\"color:blue\">return</span> (outputInterchange);\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span><span style=\"color:green\">Copies segments then loops (including child loops if copyChildLoops is true)</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> inside inputContainer (ie input Transaction/Loop/HL) to outputContainer (ie output Transaction/Loop/HL)&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">void</span> CopySegmentsAndLoops(LoopContainer inputContainer, LoopContainer outputContainer, <span style=\"color:blue\">bool</span> copyChildLoops)\r\n        {\r\n            <span style=\"color:blue\">int</span> inputSegmentCount = inputContainer.Segments.Count();\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; inputSegmentCount; i&#43;&#43;)\r\n            {\r\n                outputContainer.AddSegment(inputContainer.Segments.ElementAt(i).SegmentString);\r\n            }\r\n            <span style=\"color:blue\">int</span> inputLoopCount = inputContainer.Loops.Count();\r\n            <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> i = 0; i &lt; inputLoopCount; i&#43;&#43;)\r\n            {\r\n                outputContainer.AddLoop(inputContainer.Loops.ElementAt(i).SegmentString);\r\n                <span style=\"color:blue\">if</span> (copyChildLoops == <span style=\"color:blue\">true</span>)\r\n                {\r\n                    CopySegmentsAndLoops(inputContainer.Loops.ElementAt(i), outputContainer.Loops.ElementAt(i), <span style=\"color:blue\">true</span>);\r\n                }\r\n            }\r\n        }\r\n\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span><span style=\"color:green\">Copies segments, loops, and all child loops (and all child hierarchical loops if copyChildHL is true)</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\"> inside inputHLoop and appends as new child hierarchical loop to outputHLoop. Returns ID number of next available unused hierarchical loop ID.&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">int</span> CopyHLoop(HierarchicalLoop inputHLoop, HierarchicalLoop outputHLoop, <span style=\"color:blue\">int</span> outputHLIdIndex, <span style=\"color:blue\">bool</span> copyChildHL)\r\n        {\r\n            HierarchicalLoop outputChildHLoop = outputHLoop.AddHLoop(outputHLIdIndex.ToString(), inputHLoop.LevelCode, (inputHLoop.HierarchicalChildCode == <span style=\"color:#a31515\">&quot;1&quot;</span>));\r\n            CopySegmentsAndLoops(inputHLoop, outputChildHLoop, <span style=\"color:blue\">true</span>);\r\n            outputHLIdIndex&#43;&#43;;\r\n\r\n            <span style=\"color:blue\">if</span> (inputHLoop.HierarchicalChildCode == <span style=\"color:#a31515\">&quot;1&quot;</span> &amp;&amp; copyChildHL == <span style=\"color:blue\">true</span>)\r\n            {\r\n                <span style=\"color:blue\">for</span> (<span style=\"color:blue\">int</span> copyHLoopIndex = 0; copyHLoopIndex &lt; inputHLoop.HLoops.Count(); copyHLoopIndex&#43;&#43;)\r\n                {\r\n                    outputHLIdIndex = CopyHLoop(inputHLoop.HLoops.ElementAt(copyHLoopIndex), outputChildHLoop, outputHLIdIndex, <span style=\"color:blue\">true</span>);\r\n                }\r\n            }\r\n            <span style=\"color:blue\">return</span> (outputHLIdIndex);\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>\r\n",
    "PostedDate": "2012-05-23T13:39:53.677-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "840116",
    "ThreadId": "355921",
    "Html": "<p>Also, here's a command line utility to convert the input file into HTML which I created to help me troubleshoot.</p>\r\n<div style=\"color: black; background-color: white;\">\r\n<pre><span style=\"color: blue;\">using</span> System;\r\n<span style=\"color: blue;\">using</span> System.IO;\r\n<span style=\"color: blue;\">using</span> System.Collections.Generic;\r\n<span style=\"color: blue;\">using</span> System.Linq;\r\n<span style=\"color: blue;\">using</span> System.Text;\r\n<span style=\"color: blue;\">using</span> OopFactory.X12.Transformations;\r\n<span style=\"color: blue;\">using</span> OopFactory.X12.Parsing;\r\n<span style=\"color: blue;\">using</span> OopFactory.X12.Parsing.Model;\r\n\r\n<span style=\"color: blue;\">namespace</span> X12ToHtml\r\n{\r\n    <span style=\"color: blue;\">class</span> X12ToHTML\r\n    {\r\n        <span style=\"color: blue;\">static</span> <span style=\"color: blue;\">void</span> Main(<span style=\"color: blue;\">string</span>[] args)\r\n        {\r\n            <span style=\"color: blue;\">if</span> (args.Length != 2)\r\n            {\r\n                System.Console.WriteLine(<span style=\"color: #a31515;\">\"Run as X12ToHTML.exe 'InputX12File' 'OutputHTMLFile'\"</span>);\r\n            }\r\n            <span style=\"color: blue;\">else</span>\r\n            {\r\n                <span style=\"color: green;\">// Load X12 File with multiple interchanges into inputInterchangeList object</span>\r\n                Stream ediFile = <span style=\"color: blue;\">new</span> FileStream(args[0], FileMode.Open, FileAccess.Read);\r\n                <span style=\"color: blue;\">var</span> parser = <span style=\"color: blue;\">new</span> X12Parser();\r\n                List&lt;Interchange&gt; inputInterchangeList = parser.ParseMultiple(ediFile);\r\n                ediFile.Close();\r\n\r\n                <span style=\"color: blue;\">var</span> htmlService = <span style=\"color: blue;\">new</span> X12HtmlTransformationService(<span style=\"color: blue;\">new</span> X12EdiParsingService(suppressComments: <span style=\"color: blue;\">false</span>));\r\n                StringBuilder x12 = <span style=\"color: blue;\">new</span> StringBuilder();\r\n                <span style=\"color: blue;\">foreach</span> (Interchange interchangeItem <span style=\"color: blue;\">in</span> inputInterchangeList)\r\n                {\r\n                    x12.Append(htmlService.Transform(interchangeItem.SerializeToX12(<span style=\"color: blue;\">false</span>)));\r\n                }\r\n\r\n                <span style=\"color: blue;\">string</span> htmlout = <span style=\"color: #a31515;\">\"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;\"</span> + x12.ToString() + <span style=\"color: #a31515;\">\"&lt;/body&gt;&lt;/html&gt;\"</span>;\r\n                TextWriter htmlFile = <span style=\"color: blue;\">new</span> StreamWriter(args[1]);\r\n                htmlFile.Write(htmlout);\r\n                htmlFile.Close();\r\n                \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n</pre>\r\n</div>",
    "PostedDate": "2012-05-23T13:44:24.833-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1066259",
    "ThreadId": "355921",
    "Html": "Hi, Great work!\r<br />\n<br />\nHow would I go about bundling more than 1 transaction to a single function group / interchange?<br />\n",
    "PostedDate": "2013-07-09T12:05:47.123-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1113168",
    "ThreadId": "355921",
    "Html": "<strong>dstrubhar wrote:</strong><br />\n<blockquote>\nI might need to expose a new method for you, but I agree your second method sounds easier. &nbsp;This sounds like a good documentation page once I add the support for it. THE SE segment will automatically recalculate itself once you've added the new segments when you run the SerializeToX12 method on the Interchange object. &nbsp;I'll follow up tomorrow with some code snippets.<br />\n</blockquote>\nAny update on exposing the new method or the documentation referred to? I am trying to combine/bundle a few hundred x12 claim files that have a single claim in them and submit to a health plan as a single file weekly. <br />\n",
    "PostedDate": "2013-10-28T09:25:29.967-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1308496",
    "ThreadId": "355921",
    "Html": "I can't get this to work at all.  I have the same situation as you, multiple claims each in their own ISA/GS/ST wrapper but the end result I get from this a ISA, GS, and ST segments with nothing but three HL records in the middle.  None of my data is included at all.  What am I missing?<br />\n",
    "PostedDate": "2014-09-26T14:29:11.87-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1308501",
    "ThreadId": "355921",
    "Html": "My input file contains two claims - this is what my output from the above is:<br />\nISA<em>00</em> <em>00</em> <em>30</em>591943502 <em>ZZ</em>00000 <em>120222</em> <em>{<em>00501</em>000000001</em>1<em>T</em>:~GS<em>HC<em>010003000</em> <em>20120222<em>0223</em>171143001</em>X<em>005010X223A2~ST</em>837<em>102221001<em>005010X223A2~HL</em>1<em><em>20<em>1~HL</em>2</em>1<em>22</em>0~HL</em>3<em>1</em>22</em>0~HL<em>4</em>1<em>22<em>0~HL</em>5</em>1<em>22</em>0~SE</em>7<em>102221001~GE</em>1*171143001~IEA<em>1</em>000000001~<br />\n",
    "PostedDate": "2014-09-26T14:49:12.983-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]