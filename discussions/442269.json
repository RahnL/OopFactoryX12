[
  {
    "Id": "1038311",
    "ThreadId": "442269",
    "Html": "Some of the files I've been working with have an invalid character (hex 0x1A) appended to the end of the file which causes errors during parsing.<br />\n<pre><code>OopFactory.X12.Parsing.Model.TransactionValidationException was unhandled\n  Message=Segment '0x1A\u001a' in segment position 185 within transaction '31042' cannot be identified within the supplied specification for transaction set 837 in any of the expected loops: 2000A[1],2000B[8],2300,2400,2420A.  To change this to a warning, pass throwExceptionOnSyntaxErrors = false to the X12Parser constructor.\nParameter name: 837\n  Source=OopFactory.X12\n  ParamName=837\n  ControlNumber=31042\n  ElementId=&quot;&quot;\n  TransactionCode=837\n  Value=\u001a0x1A\n  StackTrace:\n       at OopFactory.X12.Parsing.X12Parser.ParseMultiple(Stream stream, Encoding encoding) in C:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\OopFactory.X12\\Parsing\\X12Parser.cs:line 238\n       at X12Viewer.Form1.ParseFile() in C:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\X12Viewer\\Form1.cs:line 46\n       at X12Viewer.Form1.button1_Click(Object sender, EventArgs e) in C:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\X12Viewer\\Form1.cs:line 27\n       at System.Windows.Forms.Control.OnClick(EventArgs e)\n       at System.Windows.Forms.Button.OnClick(EventArgs e)\n       at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)\n       at System.Windows.Forms.Control.WmMouseUp(Message&amp; m, MouseButtons button, Int32 clicks)\n       at System.Windows.Forms.Control.WndProc(Message&amp; m)\n       at System.Windows.Forms.ButtonBase.WndProc(Message&amp; m)\n       at System.Windows.Forms.Button.WndProc(Message&amp; m)\n       at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m)\n       at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m)\n       at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\n       at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp; msg)\n       at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentID, Int32 reason, Int32 pvLoopData)\n       at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)\n       at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)\n       at System.Windows.Forms.Application.Run(Form mainForm)\n       at X12Viewer.Program.Main() in C:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\X12Viewer\\Program.cs:line 18\n       at System.AppDomain._nExecuteAssembly(RuntimeAssembly assembly, String[] args)\n       at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)\n       at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()\n       at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\n       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean ignoreSyncCtx)\n       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n       at System.Threading.ThreadHelper.ThreadStart()\n  InnerException: \n</code></pre>\n\nI tried the throwExceptionOnSyntaxErrors = false suggestion, but I get the following error on the attempt to call OnParserWarning.  Also it looks like the transform services and the X12.Hipaa project don't support this setting, correct?<br />\n<pre><code>System.NullReferenceException was unhandled\n  Message=Object reference not set to an instance of an object.\n  Source=OopFactory.X12\n  StackTrace:\n       at OopFactory.X12.Parsing.X12Parser.ParseMultiple(Stream stream, Encoding encoding) in C:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\OopFactory.X12\\Parsing\\X12Parser.cs:line 245\n       at X12Viewer.Form1.ParseFile() in C:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\X12Viewer\\Form1.cs:line 46\n       at X12Viewer.Form1.button1_Click(Object sender, EventArgs e) in C:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\X12Viewer\\Form1.cs:line 27\n       at System.Windows.Forms.Control.OnClick(EventArgs e)\n       at System.Windows.Forms.Button.OnClick(EventArgs e)\n       at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)\n       at System.Windows.Forms.Control.WmMouseUp(Message&amp; m, MouseButtons button, Int32 clicks)\n       at System.Windows.Forms.Control.WndProc(Message&amp; m)\n       at System.Windows.Forms.ButtonBase.WndProc(Message&amp; m)\n       at System.Windows.Forms.Button.WndProc(Message&amp; m)\n       at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m)\n       at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m)\n       at System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\n       at System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG&amp; msg)\n       at System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentID, Int32 reason, Int32 pvLoopData)\n       at System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)\n       at System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)\n       at System.Windows.Forms.Application.Run(Form mainForm)\n       at X12Viewer.Program.Main() in C:\\DevTFS\\Tools\\X12Parser\\GEMMS-branch\\trunk\\src\\X12Viewer\\Program.cs:line 18\n       at System.AppDomain._nExecuteAssembly(RuntimeAssembly assembly, String[] args)\n       at System.AppDomain.ExecuteAssembly(String assemblyFile, Evidence assemblySecurity, String[] args)\n       at Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly()\n       at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\n       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean ignoreSyncCtx)\n       at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n       at System.Threading.ThreadHelper.ThreadStart()\n  InnerException: \n</code></pre>\n\nI was able to solve this particular issue by changing this line in X12StreamReader.ReadNextSegment()<br />\n<pre><code>return sb.ToString().TrimStart();</code></pre>\n\nto this<br />\n<pre><code>return sb.ToString().TrimStart().Trim('\\x1A');</code></pre>\n\nThat works for me, but I didn't know if there would be a better place in the code to strip out the invalid character.\r<br />\n<br />\nI would appreciate any comments/suggestions.\r<br />\n<br />\nThanks<br />\n",
    "PostedDate": "2013-05-01T15:25:59.277-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1038357",
    "ThreadId": "442269",
    "Html": "I have added <a href=\"https://x12parser.codeplex.com/SourceControl/changeset/25742\" rel=\"nofollow\">changeset 25742</a> which will allow you to inject a list of chars to ignore and it will ignore them anywhere they exist in the file.  This should give you more flexibility if you end up experiencing this again with some other characters.  Occasionally there have been unprintable characters like this used as segment delimiters, so this should be configured by the user what characters they want to ignore.\r<br />\n<br />\nLet me know if this solves your problem.<br />\n",
    "PostedDate": "2013-05-01T18:25:41.903-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1039980",
    "ThreadId": "442269",
    "Html": "That worked when I'm creating the X12Parser object directly as a test, but I'm primarily using the OopFactory.X12.Hipaa project (and also the HTML transformation).\r<br />\n<br />\nSo this works<br />\n<pre><code>            OopFactory.X12.Parsing.X12Parser parser = new OopFactory.X12.Parsing.X12Parser(new SpecificationFinder(), false, new char[] { '\\x1A' });\n            using (FileStream fs = new FileStream(x12Filename, FileMode.Open, FileAccess.Read))\n            {\n                var interchanges = parser.ParseMultiple(fs, encoding);\n            }</code></pre>\n\nBut when trying to create a ClaimDocument, I don't see a way to pass in the invalid characters<br />\n<pre><code>            var service = new ClaimFormTransformationService(\n                new ProfessionalClaimToHcfa1500FormTransformation(&quot;HCFA1500_Red.gif&quot;),\n                new InstitutionalClaimToUB04ClaimFormTransformation(&quot;UB04_Red.gif&quot;),\n                new DentalClaimToJ400FormTransformation(&quot;ADAJ400_Red.gif&quot;));\n\n            ClaimDocument claimDoc;\n\n            using (FileStream inputFilestream = new FileStream(x12Filename, FileMode.Open, FileAccess.Read))\n            {\n                claimDoc = service.Transform837ToClaimDocument(inputFilestream);\n            }</code></pre>\n\nOr when converting to HTML for viewing.<br />\n<pre><code>            var htmlService = new OopFactory.X12.Transformations.X12HtmlTransformationService(new OopFactory.X12.Transformations.X12EdiParsingService(suppressComments: false));\n            Stream ediFile = new FileStream(x12Filename, FileMode.Open, FileAccess.Read);\n            string html = htmlService.Transform(new StreamReader(ediFile).ReadToEnd());\n            webBrowser1.DocumentText = html;</code></pre>\n\nThanks!<br />\n",
    "PostedDate": "2013-05-06T10:26:48.803-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1040612",
    "ThreadId": "442269",
    "Html": "I have checked in the fix in <a href=\"https://x12parser.codeplex.com/SourceControl/changeset/25950\" rel=\"nofollow\">changeset 25950</a>.  This will allow you to inject your configuration of the X12Parser into the ClaimTransformationService and ClaimFormTransformationService.  It will be in the next release.<br />\n",
    "PostedDate": "2013-05-07T15:43:03.867-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1041440",
    "ThreadId": "442269",
    "Html": "That works great for me, thanks!\r<br />\n<br />\nHow about changing the X12EdiParsingService class (src\\OopFactory.X12\\Transformations\\X12EdiParsingService.cs) to the code below, so we can pass the X12Parser into that as well?  Also looked like the suppressComments was not being pass through for the &quot;public X12EdiParsingService(bool suppressComments, ISpecificationFinder specFinder)&quot; constructor so I added that line as well.<br />\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.IO;\nusing OopFactory.X12.Parsing;\nusing OopFactory.X12.Parsing.Model;\n\nnamespace OopFactory.X12.Transformations\n{\n    public class X12EdiParsingService : ITransformationService\n    {\n        private bool _suppressComments;\n        private X12Parser _parser;\n\n        public X12EdiParsingService(bool suppressComments)\n        {\n            _parser = new X12Parser();\n            _suppressComments = suppressComments;\n        }\n\n        public X12EdiParsingService(bool suppressComments, ISpecificationFinder specFinder)\n        {\n            _parser = new X12Parser(specFinder, true);\n            _suppressComments = suppressComments;\n        }\n\n        public X12EdiParsingService(bool suppressComments, X12Parser parser)\n        {\n            _parser = parser;\n            _suppressComments = suppressComments;\n        }\n\n        public string Transform(string x12)\n        {\n            Interchange interchange = _parser.ParseMultiple(new MemoryStream(Encoding.ASCII.GetBytes(x12))).FirstOrDefault();\n            return interchange.Serialize(_suppressComments);\n        }\n\n    }\n}</code></pre>\n\n",
    "PostedDate": "2013-05-09T09:22:56.187-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1041608",
    "ThreadId": "442269",
    "Html": "Also tried an attempt at adding the ignored characters to the X12AcknowledgmentService.<br />\n<pre><code>namespace OopFactory.X12.Validation\n{\n    public class X12AcknowledgmentService\n    {\n        ISpecificationFinder _specFinder;\n        private char[] _ignoredChars;\n\n        public X12AcknowledgmentService(ISpecificationFinder specFinder, char[] ignoredChars)\n        {\n            _specFinder = specFinder;\n            _ignoredChars = ignoredChars;\n        }\n\n        public X12AcknowledgmentService(ISpecificationFinder specFinder)\n            : this(specFinder, new char[] { })\n        {\n        }\n\n        public X12AcknowledgmentService()\n            : this(new SpecificationFinder(), new char[] { })\n        {\n        }\n\n        public List&lt;FunctionalGroupResponse&gt; AcknowledgeTransactions(Stream x12Stream)\n        {\n            return AcknowledgeTransactions(x12Stream, Encoding.UTF8);\n        }\n\n        public virtual List&lt;FunctionalGroupResponse&gt; AcknowledgeTransactions(Stream x12Stream, Encoding encoding)\n        {\n            var responses = new Dictionary&lt;string, FunctionalGroupResponse&gt;();\n\n            using (var reader = new X12StreamReader(x12Stream, encoding, _ignoredChars))\n            {\n                var trans = reader.ReadNextTransaction();\n                while (!string.IsNullOrEmpty(trans.Transactions.First()))\n                {</code></pre>\n\n",
    "PostedDate": "2013-05-09T15:08:22.793-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1042448",
    "ThreadId": "442269",
    "Html": "This is fixed and release in <a href=\"https://x12parser.codeplex.com/releases/view/106524\" rel=\"nofollow\">version 3.0.5</a>.<br />\n",
    "PostedDate": "2013-05-12T07:58:26.393-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]