[
  {
    "Id": "1454426",
    "ThreadId": "648311",
    "Html": "Getting an error parsing an 820. Looks like it's an out of memory exception. The 820 file is approx. 28 MB. Any ideas/workarounds would be appreciated. Thanks!\r<br />\n<br />\nHere is the code that does the parsing:<br />\n<pre><code>Function Parse820toXML(strEDI820 As String) As String\n    Dim fstream = New FileStream(strEDI820, FileMode.Open, FileAccess.Read)\n    Dim parser = New X12Parser()\n    Dim interchange = parser.ParseMultiple(fstream).First()\n    Dim x12Xml = interchange.Serialize()\n    Parse820toXML = x12Xml\nEnd Function\n</code></pre>\n\nI am getting the exception when it attempts to serialize. Here is the exception details:\r<br />\n<br />\nSystem.InvalidOperationException was caught\r<br />\n  HResult=-2146233079\r<br />\n  Message=There was an error generating the XML document.\r<br />\n  Source=System.Xml\r<br />\n  StackTrace:<br />\n<pre><code>   at System.Xml.Serialization.XmlSerializer.Serialize(XmlWriter xmlWriter, Object o, XmlSerializerNamespaces namespaces, String encodingStyle, String id)\n   at System.Xml.Serialization.XmlSerializer.Serialize(Stream stream, Object o, XmlSerializerNamespaces namespaces)\n   at System.Xml.Serialization.XmlSerializer.Serialize(Stream stream, Object o)\n   at OopFactory.X12.Parsing.Model.Interchange.Serialize(Stream stream)\n   at OopFactory.X12.Parsing.Model.Interchange.Serialize(Boolean suppressComments)\n   at OopFactory.X12.Parsing.Model.Interchange.Serialize()\n   at FW102W01.BCBSTSHOP820.Parse820toXML(String strEDI820) in C:\\Users\\j71631a\\Documents\\Visual Studio 2012\\Projects\\BCBST SHOP 820\\BCBST SHOP 820\\BCBSTSHOP820.vb:line 125\n   at FW102W01.BCBSTSHOP820.MainProcess() in C:\\Users\\j71631a\\Documents\\Visual Studio 2012\\Projects\\BCBST SHOP 820\\BCBST SHOP 820\\BCBSTSHOP820.vb:line 73</code></pre>\n\nInnerException: System.OutOfMemoryException<br />\n<pre><code>   HResult=-2147024882\n   Message=Exception of type 'System.OutOfMemoryException' was thrown.\n   Source=mscorlib\n   StackTrace:\n        at System.IO.MemoryStream.set_Capacity(Int32 value)\n        at System.IO.MemoryStream.EnsureCapacity(Int32 value)\n        at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\n        at System.IO.StreamWriter.Flush(Boolean flushStream, Boolean flushEncoder)\n        at System.IO.StreamWriter.Write(String value)\n        at System.Xml.XmlTextEncoder.WriteRawWithSurrogateChecking(String text)\n        at System.Xml.XmlTextWriter.WriteComment(String text)\n        at OopFactory.X12.Parsing.Model.Segment.WriteXml(XmlWriter writer)\n        at OopFactory.X12.Parsing.Model.HierarchicalLoopContainer.WriteXml(XmlWriter writer)\n        at OopFactory.X12.Parsing.Model.Loop.WriteXml(XmlWriter writer)\n        at OopFactory.X12.Parsing.Model.HierarchicalLoopContainer.WriteXml(XmlWriter writer)\n        at OopFactory.X12.Parsing.Model.Loop.WriteXml(XmlWriter writer)\n        at OopFactory.X12.Parsing.Model.HierarchicalLoopContainer.WriteXml(XmlWriter writer)\n        at OopFactory.X12.Parsing.Model.Transaction.WriteXml(XmlWriter writer)\n        at OopFactory.X12.Parsing.Model.FunctionGroup.WriteXml(XmlWriter writer)\n        at OopFactory.X12.Parsing.Model.Interchange.WriteXml(XmlWriter writer)\n        at OopFactory.X12.Parsing.Model.Segment.System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)\n        at System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(IXmlSerializable serializable, String name, String ns, Boolean isNullable, Boolean wrapped)\n        at Microsoft.Xml.Serialization.GeneratedAssembly.XmlSerializationWriterInterchange.Write1_Interchange(Object o)\n   InnerException: </code></pre>\n\n",
    "PostedDate": "2015-12-03T07:41:46.493-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1454430",
    "ThreadId": "648311",
    "Html": "You don't possible work in Oregon do you?  You don't have to answer but it sounds like some very large adjustment files from a source in Oregon is producing 820s that their partners can't parse.<br />\n<br />\nAnyways, this is a known limitation of the in memory parsing of x12 using XML and XSLT.<br />\n<br />\nThe quick work around is to try and manually split the file.  This can be somewhat tedious and error prone if you don't know how to look at the file.  There is a command line routine called UnbundleX12  documented here <a href=\"https://x12parser.codeplex.com/documentation\" rel=\"nofollow\">https://x12parser.codeplex.com/documentation</a> for making your files smaller, but I would just use that as a work-around so you can respond to production issues.  Try splitting at the transaction set level using ST or higher instead at a loop level.<br />\n<br />\nThe desired solution is to switch to a streamed approach of parsing the file.  This isn't supported with the xml parser because of the way the xslt has to run on the xml in memory.  If you were to instead use the ImportX12 command and load into a database than this will stream the parse into the db, making size a non-issue.<br />\n<br />\nThis does require a re-write of everything you have done as xslt into sql queries instead, but is the only scalable solution.<br />\n<br />\nIf this is a one of production issue than the UnbundleX12 routine is probably a safer bet.<br />\n",
    "PostedDate": "2015-12-03T07:55:48.99-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1454431",
    "ThreadId": "648311",
    "Html": "<strong>dstrubhar wrote:</strong><br />\n<blockquote>\nYou don't possible work in Oregon do you?  You don't have to answer but it sounds like some very large adjustment files from a source in Oregon is producing 820s that their partners can't parse.<br />\n<br />\nAnyways, this is a known limitation of the in memory parsing of x12 using XML and XSLT.<br />\n<br />\nThe quick work around is to try and manually split the file.  This can be somewhat tedious and error prone if you don't know how to look at the file.  There is a command line routine called UnbundleX12  documented here <a href=\"https://x12parser.codeplex.com/documentation\" rel=\"nofollow\">https://x12parser.codeplex.com/documentation</a> for making your files smaller, but I would just use that as a work-around so you can respond to production issues.  Try splitting at the transaction set level using ST or higher instead at a loop level.<br />\n<br />\nThe desired solution is to switch to a streamed approach of parsing the file.  This isn't supported with the xml parser because of the way the xslt has to run on the xml in memory.  If you were to instead use the ImportX12 command and load into a database than this will stream the parse into the db, making size a non-issue.<br />\n<br />\nThis does require a re-write of everything you have done as xslt into sql queries instead, but is the only scalable solution.<br />\n<br />\nIf this is a one of production issue than the UnbundleX12 routine is probably a safer bet.<br />\n</blockquote>\nNo, I don't work in Oregon. This 820 file is coming from the federal government(Exchange related). This is our first test file we've gotten. I'm hoping not to have to do a complete rewrite. <br />\n",
    "PostedDate": "2015-12-03T08:04:56.55-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1454432",
    "ThreadId": "648311",
    "Html": "Okay, if your sticking with the xml, than it is best to use the code that is in the UnbundleX12 console to split the file.  This will allow you to continue to use the xslt but have it so that it loads smaller file sizes.<br />\nAlso if you are testing this on your desktop, it might be better to test on the server that is configured similar to your production server so that you know if the memory issue will be a problem there.<br />\n",
    "PostedDate": "2015-12-03T08:08:13.193-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1454449",
    "ThreadId": "648311",
    "Html": "What about the possibility of unbundling by loop id, serializing each unbundled segment one at a time and running the xml through the xslt and putting out to a csv in append mode? Could it be handled that way? Do you know what the loop id is that you would want to split an 820 on? It's at the membership level, I'm pretty sure. Thanks for your input!<br />\n",
    "PostedDate": "2015-12-03T10:32:17.46-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1454459",
    "ThreadId": "648311",
    "Html": "Using the imbedded spec here <a href=\"https://x12parser.codeplex.com/SourceControl/latest#trunk/src/OopFactory.X12/Specifications/Ansi-820-4010Specification.xml\" rel=\"nofollow\">https://x12parser.codeplex.com/SourceControl/latest#trunk/src/OopFactory.X12/Specifications/Ansi-820-4010Specification.xml</a> then you would specify &quot;ENT&quot; to the UnbundleX12 routine.  The actual transactions are usually an adjustment &quot;ADJ&quot;, or a Remittance Advice &quot;RMR&quot;, but getting down to &quot;ENT&quot; would bundle all the transactions related to a person down to one file.\r<br />\n<br />\nThis will work but may create a lot of small files, if you are okay with that than that will solve your out of memory issue.  Those could be transient files since you just need them to do the parse and you would always keep your original somewhere else.  All the control numbers in the headers would stay the same, the only thing that would change between the small files and the original file is that the trailing segments that indicate how me segments in each transaction would obviously change since your small files don't have all the original segments in each broken down file.<br />\n",
    "PostedDate": "2015-12-03T12:01:01.383-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1454463",
    "ThreadId": "648311",
    "Html": "Here is my XSLT where I get the detail. Can you tell from this at which loop I need to unbundle?\r<br />\n<br />\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\r<br />\n&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;<a href=\"http://www.w3.org/1999/XSL/Transform\" rel=\"nofollow\">http://www.w3.org/1999/XSL/Transform</a>&quot;<br />\n<pre><code>xmlns:msxsl=&quot;urn:schemas-microsoft-com:xslt&quot; exclude-result-prefixes=&quot;msxsl&quot;</code></pre>\n\n<blockquote>\n&lt;xsl:output method=&quot;text&quot; indent=&quot;yes&quot;/&gt;<br />\n</blockquote>\n&lt;xsl:template match=&quot;Interchange&quot;&gt;<br />\n<pre><code>&lt;xsl:apply-templates select=&quot;FunctionGroup/Transaction&quot;/&gt;</code></pre>\n\n&lt;/xsl:template&gt;\r<br />\n<br />\n  &lt;xsl:template match=&quot;Transaction&quot; &gt;<br />\n<pre><code>&lt;xsl:variable name=&quot;trans&quot; select=&quot;.&quot;/&gt;\n&lt;xsl:variable name=&quot;payee&quot; select =&quot;./Loop[@LoopId='N1']/N1[N101='PE']&quot;/&gt;\n&lt;xsl:variable name=&quot;payor&quot; select =&quot;./Loop[@LoopId='N1']/N1[N101='RM']&quot;/&gt;\n&lt;xsl:value-of select=&quot;$trans/TRN/TRN02&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$trans/BPR/BPR16&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;translate($payee/N102,',','')&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$payee/N104&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$payor/N102&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$payor/N104&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$payor/../PER/PER02&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$payor/../PER/PER04&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$payor/../PER/PER06&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$trans/BPR/BPR02&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$trans/BPR/BPR03&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$trans/BPR/BPR04&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$trans/BPR/BPR12&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$trans/BPR/BPR13&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$trans/BPR/BPR14&quot;/&gt;\n&lt;xsl:value-of select=&quot;','&quot;/&gt;\n&lt;xsl:value-of select=&quot;$trans/BPR/BPR15&quot;/&gt;\n&lt;xsl:text&gt;&amp;#x0A;&lt;/xsl:text&gt;</code></pre>\n\n&lt;/xsl:template&gt;\r<br />\n&lt;/xsl:stylesheet&gt;<br />\n",
    "PostedDate": "2015-12-03T12:15:08.827-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]