[
  {
    "Id": "1062229",
    "ThreadId": "448480",
    "Html": "I've successfully read in an 811 EDI file into the X12Parser:<br />\n<pre><code>        using (StreamReader sr = new StreamReader(ediFilePath))\n        {\n            String EdiLine = sr.ReadToEnd();\n\n            X12Parser parser = new X12Parser();\n            Interchange interchange = parser.ParseMultiple(new MemoryStream(Encoding.ASCII.GetBytes(EdiLine))).First();\n\n</code></pre>\n\nAnd I can get header info:<br />\n<pre><code>            Assert.AreEqual(&quot;          &quot;, interchange.AuthorInfo);\n            Assert.AreEqual(&quot;00&quot;, interchange.AuthorInfoQualifier);\n            Assert.AreEqual(1, interchange.FunctionGroups.Count());\n            Assert.AreEqual(&quot;000000006&quot;, interchange.InterchangeControlNumber);\n            Assert.AreEqual(new DateTime(2013, 6, 18, 15, 8, 0), interchange.InterchangeDate);\n            Assert.AreEqual(&quot;123456789MT    &quot;, interchange.InterchangeReceiverId);\n            Assert.AreEqual(&quot;ZZ&quot;, interchange.InterchangeReceiverIdQualifier);\n            Assert.AreEqual(&quot;STFM   SF00001 &quot;, interchange.InterchangeSenderId);\n            Assert.AreEqual(&quot;ZZ&quot;, interchange.InterchangeSenderIdQualifier);\n            Assert.AreEqual(&quot;          &quot;, interchange.SecurityInfo);\n            Assert.AreEqual(&quot;00&quot;, interchange.SecurityInfoQualifier);\n</code></pre>\n\nBut that's as far as I can get.  I need to get information like the bank name, customer names and dollar values, etc...\r<br />\n<br />\nI don't know and can't find information about the internal structure of this object to retrieve this information.  Any help would be vastly appreciated!<br />\n",
    "PostedDate": "2013-06-27T17:06:04.067-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1066243",
    "ThreadId": "448480",
    "Html": "Here is a quick stripped down example:<br />\n<pre><code>foreach (var functionGroup in interchange.FunctionGroups)\n            {\n                foreach (var transaction in functionGroup.Transactions)\n                {\n                   switch (transaction.IdentifierCode)\n                    {\n                        case &quot;856&quot;: //ASN\n                            var d856 = ParsedDocuments.CTDI.Edi856.CreateFromTransaction(transaction);\n\n                            break;\n                    }\n\n                }\n            }</code></pre>\n\n<hr />\na few lines from CreateFromTransaction Method that show different ways to pull data:<br />\n<pre><code> var document = new Edi856 {Transaction = transaction};\n var header = GetLoop&lt;HierarchicalLoopContainer&gt;(transaction.HLoops,&quot;HL&quot;).First();\n document.AsnNumber =GetElement(transaction.Segments, &quot;BSN&quot;, 2);\n\nvar n1Loops = GetLoop(header.Segments, &quot;N1&quot;);\n            foreach (var container in n1Loops)\n            {\n                switch (container.GetElement(1))\n                {\n                    case &quot;MF&quot;:\n                        document.Oem = container.GetElement(2);\n                        break;\n                    case &quot;ST&quot;:\n                        document.ShipToName = container.GetElement(2);\n                        document.ShipToLocation = container.GetElement(4);\n                        break;\n                }\n            }\n\nvar orderLoop = GetLoop&lt;HierarchicalLoopContainer&gt;(header.HLoops, &quot;HL&quot;);\n            foreach (var order in orderLoop)\n            {\n                var detail = new Edi856Detail();\n                detail.PurchaseOrderNumber = GetElement(order.Segments, &quot;PRF&quot;, 1);\n              \n\n                var packLoop = GetLoop&lt;HierarchicalLoopContainer&gt;(order.HLoops, &quot;HL&quot;);\n                foreach (var pack in packLoop)\n                {\n                    var packDetail = new Edi856DetailPack();\n\n                    packDetail.PalletId = GetElement(pack.Segments, &quot;REF&quot;, 2);\n\n                    var itemLoop = GetLoop&lt;HierarchicalLoopContainer&gt;(pack.HLoops, &quot;HL&quot;);\n                    foreach (var item in itemLoop)\n                    {\n                        var itemDetail = new Edi856DetailPackItem();\n\n                        itemDetail.LineNumber = GetElement(item.Segments, &quot;LIN&quot;, 1);\n                        itemDetail.ItemNumber = GetElement(item.Segments, &quot;LIN&quot;, 3);\n                        itemDetail.UnitCount = Convert.ToDecimal(GetElement(item.Segments, &quot;SN1&quot;, 2));\n                        itemDetail.PurchaseOrderNumber = GetElement(item.Segments, &quot;PRF&quot;, 1);\n                        itemDetail.PurchaseOrderLineNumber = GetElement(item.Segments, &quot;PRF&quot;, 2);\n\n                        packDetail.Items.Add(itemDetail);\n                    }\n\n                    detail.Packs.Add(packDetail);\n                }\n\n\n                document.Orders.Add(detail);\n            }</code></pre>\n\n<hr />\nA few helper methods i use in my base class for parsed EDI documents such as the Edi856 object:<br />\n<pre><code>        public static string GetElement(IEnumerable&lt;Segment&gt; segments, string segmentId, int index, int skip = 0)\n        {\n            try\n            {\n                var segment = segments.Where(o =&gt; o.SegmentId == segmentId).Skip(skip).FirstOrDefault();\n                if (segment != null)\n                {\n                    return segment.GetElement(index).Trim();\n                }\n\n                return &quot;&quot;;\n            }\n            catch (Exception)\n            {\n                return &quot;ERR&quot;;\n            }\n        }\n        public static IEnumerable&lt;Segment&gt; GetSegments(IEnumerable&lt;Segment&gt; segments, string segmentId)\n        {\n            try\n            {\n                return segments.Where(o =&gt; o.SegmentId == segmentId);\n            }\n            catch (Exception)\n            {\n                return null;\n            }\n        }\n        public static IEnumerable&lt;LoopContainer&gt; GetLoop(IEnumerable&lt;Segment&gt; segments, string segmentId)\n        {\n            return GetLoop&lt;LoopContainer&gt;(segments, segmentId);\n        }\n        public static IEnumerable&lt;T&gt; GetLoop&lt;T&gt;(IEnumerable&lt;Segment&gt; segments, string segmentId) where T : LoopContainer\n        {\n            try\n            {\n\n                var containers = new List&lt;T&gt;();\n\n                var detailLoop = GetSegments(segments.ToList(), segmentId);\n\n                foreach (var segment in detailLoop)\n                {\n                    var container = segment as T;\n                    containers.Add(container);\n                }\n\n                return containers;\n            }\n            catch (Exception)\n            {\n                return null;\n            }\n        }\n</code></pre>\n\n",
    "PostedDate": "2013-07-09T11:22:12.923-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1076683",
    "ThreadId": "448480",
    "Html": "&quot;ParsedDocuments&quot; does not seem to be something that's available to me (compiler doesn't recognize and I can't find it in the source).<br />\nAlso, just about everything in the 2nd to last code snippet is not compilable.<br />\n<br />\nI've downloaded the May source and have references to OopFactory.X12, OopFactory.X12.Hipaa, &amp; OopFactory.X12.Validation.<br />\n<br />\nThe labels, in particular, that are causing problems:<br />\nEdi856<br />\nTransaction<br />\nGetLoop&lt;...&gt;<br />\nGetElement()<br />\n<br />\nWhat am I missing?<br />\n",
    "PostedDate": "2013-08-05T01:31:34.777-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1081383",
    "ThreadId": "448480",
    "Html": "It was merely meant as sample information not copy &amp; paste friendly but i hope the following can help a bit more.<br />\n<blockquote>\nParsedDocuments.CTDI.Edi856.CreateFromTransaction(transaction);  \n<br />\n</blockquote>\nThis is my own Edi856 class which i parse specific fields into a class that I can easily read and use.\r<br />\n<br />\nInside of the Edi856 object i have a static method called CreateFromTransaction this converts the transaction object from the X12 parser and returns the Edi856 object created. This is the main meat and potatoes i was trying to show you how I pulled information.\r<br />\n<br />\nThe only reason I included the 3rd block with the helper methods was because I used them in the CreateFromTransaction and didn't want to leave you hanging.\r<br />\n<br />\nAll my parsed objects such as the Edi856 have a base class with those methods such as GetLoop.\r<br />\n<br />\n<br />\nHere is the base class i use although you may want to throw a some of it out.<br />\n<pre><code>    public class EdiDocumentBase\n    {\n\n        public ProcessResultDetail ResultDetail;\n        public Transaction Transaction;\n        public static string GetElement(IEnumerable&lt;Segment&gt; segments, string segmentId, int index, int skip = 0)\n        {\n            try\n            {\n                var segment = segments.Where(o =&gt; o.SegmentId == segmentId).Skip(skip).FirstOrDefault();\n                if (segment != null)\n                {\n                    return segment.GetElement(index).Trim();\n                }\n\n                return &quot;&quot;;\n            }\n            catch (Exception)\n            {\n                return &quot;ERR&quot;;\n            }\n        }\n        public static IEnumerable&lt;Segment&gt; GetSegments(IEnumerable&lt;Segment&gt; segments, string segmentId)\n        {\n            try\n            {\n                return segments.Where(o =&gt; o.SegmentId == segmentId);\n            }\n            catch (Exception)\n            {\n                return null;\n            }\n        }\n        public static IEnumerable&lt;LoopContainer&gt; GetLoop(IEnumerable&lt;Segment&gt; segments, string segmentId)\n        {\n            return GetLoop&lt;LoopContainer&gt;(segments, segmentId);\n        }\n        public static IEnumerable&lt;T&gt; GetLoop&lt;T&gt;(IEnumerable&lt;Segment&gt; segments, string segmentId) where T : LoopContainer\n        {\n            try\n            {\n\n                var containers = new List&lt;T&gt;();\n\n                var detailLoop = GetSegments(segments.ToList(), segmentId);\n\n                foreach (var segment in detailLoop)\n                {\n                    var container = segment as T;\n                    containers.Add(container);\n\n                    Console.WriteLine(segment.SegmentString);\n\n                }\n\n                return containers;\n            }\n            catch (Exception)\n            {\n                return null;\n            }\n        }\n        public static DateTime ConvertG62ToDateTime(Segment segment)\n        {\n            DateTime date;\n            if (DateTime.TryParseExact(segment.GetElement(2) + segment.GetElement(4), &quot;yyyyMMddHHmmss&quot;, null, System.Globalization.DateTimeStyles.None, out date))\n                return date;\n\n            if (DateTime.TryParseExact(segment.GetElement(2) + segment.GetElement(4), &quot;yyyyMMddHHmm&quot;, null, System.Globalization.DateTimeStyles.None, out date))\n                return date;\n\n            if (DateTime.TryParseExact(segment.GetElement(2) + segment.GetElement(4), &quot;yyyyMMdd&quot;, null, System.Globalization.DateTimeStyles.None, out date))\n                return date;\n\n            throw new Exception(&quot;Unable to convert G62 segment to DateTime object.&quot;);\n\n        }\n        \n\n    }</code></pre>\n\n",
    "PostedDate": "2013-08-16T08:00:36.49-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]