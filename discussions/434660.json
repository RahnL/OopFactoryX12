[
  {
    "Id": "1007454",
    "ThreadId": "434660",
    "Html": "Hi there,\r<br />\n<br />\nGood day! I am amazed with the x12Parser project you built and shared with the community. I am currently thinking of utilizing it in part of my work, rest assured credibility will be given.\r<br />\n<br />\nA brief specification on the work I am working on that I hope to share here. I am going to implement x12Parser into a document management system that I am working on. The requirement will be:<br />\n<ol>\n<li>There will be inbound EDI file from client.</li>\n<li>This EDI inbound will be translated to understandable data which is to be processed by the system im working on.</li>\n<li>\nThere will be EDI outbound file. This EDI outbound file will be generated based on the data by the system im working on.<br />\n</li>\n</ol>\nQuestions:\r<br />\n<br />\nI am thinking to integrate x12Parser into the system where it will process the EDI file into XML and be consumed into my system. But on the outbound file for the EDI, anyway that I could use x12Parser to assign data to it, and generate the EDI file? \r<br />\n<br />\nHope you can provide some hint and assistance.\r<br />\n<br />\nThanks in advance.\r<br />\n<br />\nP/s: my apology in advance to dstrubhar for contacting him prior asking. Only realised I should have posted on this discussion thread instead.<br />\n",
    "PostedDate": "2013-02-27T01:12:32.893-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1007922",
    "ThreadId": "434660",
    "Html": "You can generate an XML file that matches the specifications that are outlined in the XSD file and then run it through the TransformToX12.exe program and it will convert it to an EDI file. \r<br />\n<br />\nA good way that you can test this process with a file is to take a well formed EDI file, run the parseX12.exe program against it and then take the output from that program and run it through the transformToX12.exe program and it will transform it back to the X12 file. At that point you should have the original X12 file, the XML file and the freshly output X12 file. You can compare the two X12 files and they should be the same. You can take the XML file and use that as a guideline for what you need to transform your data into to run through the TransformToX12.exe program. <br />\n",
    "PostedDate": "2013-02-27T16:19:01.317-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1007944",
    "ThreadId": "434660",
    "Html": "Here would be an example of what I mentioned above: \r<br />\n<br />\nHere is the sample file, samplefile.edi: \r<br />\nISA<em>00</em>          <em>00</em>          <em>12</em>1111111111     <em>01<em>111111111      <em>130227</em>1235</em>U<em>00403</em>000000068</em>0<em>P</em>&gt;\r<br />\nGS<em>PO<em>111111111</em>111111111</em>20130227<em>1235</em>68<em>X<em>004030VICS\r<br />\nST</em>850<em>0001\r<br />\nBEG<em>00</em>SA</em>XX-1234<em><em>19980301</em>AE123\r<br />\nN1</em>ST<em>John Doe\r<br />\nN2<em>Division 1\r<br />\nN3</em>1000 Park Avenue\r<br />\nN4<em>New York<em>NY</em>10610\r<br />\nPO1</em>1<em>25</em>EA</em>9.5<em>CT</em>MG<em>XYZ-1234\r<br />\nPID<em>F</em></em></em><em>HAMMER-CLAW\r<br />\nPO1<em>2</em>75<em>EA<em>6.95</em>CT</em>MG<em>L505-123\r<br />\nPID</em>F</em>*<em><em>PLIERS 8 NEEDLE NOSE\r<br />\nCTT<em>2\r<br />\nAMT</em>TT<em>758.75<em>C\r<br />\nSE</em>13</em>0001\r<br />\nGE<em>1</em>68\r<br />\nIEA</em>1</em>000000068\r<br />\n<br />\nFor the purposes of this example I have the EDI file in the same file as the executable files. \r<br />\n<br />\nFrom a command window prompt, I run: \r<br />\n<br />\nC:\\X12\\Release&gt;X12Parser.exe samplefile.edi samplefile.xml\r<br />\n<br />\nThis creates a new file called samplefile.xml, the content of which is: \r<br />\n&lt;?xml version=&quot;1.0&quot;?&gt;\r<br />\n&lt;Interchange segment-terminator=&quot;&#xD;&quot; element-separator=&quot;*&quot; sub-element-separator=&quot;&gt;&quot;&gt;\r<br />\n  &lt;ISA&gt;<br />\n<pre><code>&lt;!--Author Information Qualifier--&gt;\n&lt;ISA01&gt;00&lt;!--No Authorization Information Present--&gt;&lt;/ISA01&gt;\n&lt;!--Author Information--&gt;\n&lt;ISA02&gt;          &lt;/ISA02&gt;\n&lt;!--Security Information Qualifer--&gt;\n&lt;ISA03&gt;00&lt;!--No Security Information Present--&gt;&lt;/ISA03&gt;\n&lt;!--Security Information--&gt;\n&lt;ISA04&gt;          &lt;/ISA04&gt;\n&lt;!--Interchange ID Qualifier--&gt;\n&lt;ISA05&gt;12&lt;!--Matress Retailer--&gt;&lt;/ISA05&gt;\n&lt;!--Interchange Sender ID--&gt;\n&lt;ISA06&gt;1111111111     &lt;/ISA06&gt;\n&lt;!--Interchange ID Qualifier--&gt;\n&lt;ISA07&gt;01&lt;!--Duns (Dun &amp; Bradstreet)--&gt;&lt;/ISA07&gt;\n&lt;!--Interchange Receiver ID--&gt;\n&lt;ISA08&gt;111111111      &lt;/ISA08&gt;\n&lt;!--Interchange Date--&gt;\n&lt;ISA09&gt;130227&lt;/ISA09&gt;\n&lt;!--Interchange Time--&gt;\n&lt;ISA10&gt;1235&lt;/ISA10&gt;\n&lt;!--Inter Control Standards Identifier--&gt;\n&lt;ISA11&gt;U&lt;!--U.S. EDI Community of ASC X12, TDCC, and UCS--&gt;&lt;/ISA11&gt;\n&lt;!--Inter Control Version Number--&gt;\n&lt;ISA12&gt;00403&lt;/ISA12&gt;\n&lt;!--Inter Control Number--&gt;\n&lt;ISA13&gt;000000068&lt;/ISA13&gt;\n&lt;!--Acknowlegment Requested--&gt;\n&lt;ISA14&gt;0&lt;!--No Acknowledgment Requested--&gt;&lt;/ISA14&gt;\n&lt;!--Usage Indicator--&gt;\n&lt;ISA15&gt;P&lt;!--Production Data--&gt;&lt;/ISA15&gt;\n&lt;!--Component Element Separator--&gt;\n&lt;ISA16&gt;\n  &lt;ISA1601 /&gt;\n  &lt;ISA1602 /&gt;\n&lt;/ISA16&gt;</code></pre>\n\n&lt;/ISA&gt;\r<br />\n  &lt;FunctionGroup&gt;<br />\n<pre><code>&lt;GS&gt;\n  &lt;!--Functional Identifier Code--&gt;\n  &lt;GS01&gt;PO&lt;/GS01&gt;\n  &lt;!--Application Sender's Code--&gt;\n  &lt;GS02&gt;111111111&lt;/GS02&gt;\n  &lt;!--Application Receiver's Code--&gt;\n  &lt;GS03&gt;111111111&lt;/GS03&gt;\n  &lt;!--Date--&gt;\n  &lt;GS04&gt;20130227&lt;/GS04&gt;\n  &lt;!--Time--&gt;\n  &lt;GS05&gt;1235&lt;/GS05&gt;\n  &lt;!--Group Control Number--&gt;\n  &lt;GS06&gt;68&lt;/GS06&gt;\n  &lt;!--Responsible Agency Code--&gt;\n  &lt;GS07&gt;X&lt;!--Accredited Standards Committee X12--&gt;&lt;/GS07&gt;\n  &lt;!--Version/Release/Industry Identifier Code--&gt;\n  &lt;GS08&gt;004030VICS&lt;/GS08&gt;\n&lt;/GS&gt;\n&lt;Transaction ControlNumber=&quot;0001&quot;&gt;\n  &lt;ST&gt;\n    &lt;!--Transaction Set Identifier Code--&gt;\n    &lt;ST01&gt;850&lt;/ST01&gt;\n    &lt;!--Transaction Set Control Number--&gt;\n    &lt;ST02&gt;0001&lt;/ST02&gt;\n  &lt;/ST&gt;\n  &lt;BEG&gt;\n    &lt;BEG01&gt;00&lt;/BEG01&gt;\n    &lt;BEG02&gt;SA&lt;/BEG02&gt;\n    &lt;BEG03&gt;XX-1234&lt;/BEG03&gt;\n    &lt;BEG04 /&gt;\n    &lt;BEG05&gt;19980301&lt;/BEG05&gt;\n    &lt;BEG06&gt;AE123&lt;/BEG06&gt;\n  &lt;/BEG&gt;\n  &lt;Loop LoopId=&quot;N1&quot; Name=&quot;&quot;&gt;\n    &lt;N1&gt;\n      &lt;!--Entity Identifier Code--&gt;\n      &lt;N101&gt;ST&lt;/N101&gt;\n      &lt;!--Name--&gt;\n      &lt;N102&gt;John Doe&lt;/N102&gt;\n    &lt;/N1&gt;\n    &lt;N2&gt;\n      &lt;N201&gt;Division 1&lt;/N201&gt;\n    &lt;/N2&gt;\n    &lt;N3&gt;\n      &lt;!--Address Information--&gt;\n      &lt;N301&gt;1000 Park Avenue&lt;/N301&gt;\n    &lt;/N3&gt;\n    &lt;N4&gt;\n      &lt;!--City Name--&gt;\n      &lt;N401&gt;New York&lt;/N401&gt;\n      &lt;!--State or Provice Code--&gt;\n      &lt;N402&gt;NY&lt;/N402&gt;\n      &lt;!--Postal Code--&gt;\n      &lt;N403&gt;10610&lt;/N403&gt;\n    &lt;/N4&gt;\n  &lt;/Loop&gt;\n  &lt;Loop LoopId=&quot;PO1&quot; Name=&quot;Baseline Item Data&quot;&gt;\n    &lt;PO1&gt;\n      &lt;PO101&gt;1&lt;/PO101&gt;\n      &lt;PO102&gt;25&lt;/PO102&gt;\n      &lt;PO103&gt;EA&lt;/PO103&gt;\n      &lt;PO104&gt;9.5&lt;/PO104&gt;\n      &lt;PO105&gt;CT&lt;/PO105&gt;\n      &lt;PO106&gt;MG&lt;/PO106&gt;\n      &lt;PO107&gt;XYZ-1234&lt;/PO107&gt;\n    &lt;/PO1&gt;\n    &lt;Loop LoopId=&quot;PID&quot; Name=&quot;Product/Item Description&quot;&gt;\n      &lt;PID&gt;\n        &lt;PID01&gt;F&lt;/PID01&gt;\n        &lt;PID02 /&gt;\n        &lt;PID03 /&gt;\n        &lt;PID04 /&gt;\n        &lt;PID05&gt;HAMMER-CLAW&lt;/PID05&gt;\n      &lt;/PID&gt;\n    &lt;/Loop&gt;\n  &lt;/Loop&gt;\n  &lt;Loop LoopId=&quot;PO1&quot; Name=&quot;Baseline Item Data&quot;&gt;\n    &lt;PO1&gt;\n      &lt;PO101&gt;2&lt;/PO101&gt;\n      &lt;PO102&gt;75&lt;/PO102&gt;\n      &lt;PO103&gt;EA&lt;/PO103&gt;\n      &lt;PO104&gt;6.95&lt;/PO104&gt;\n      &lt;PO105&gt;CT&lt;/PO105&gt;\n      &lt;PO106&gt;MG&lt;/PO106&gt;\n      &lt;PO107&gt;L505-123&lt;/PO107&gt;\n    &lt;/PO1&gt;\n    &lt;Loop LoopId=&quot;PID&quot; Name=&quot;Product/Item Description&quot;&gt;\n      &lt;PID&gt;\n        &lt;PID01&gt;F&lt;/PID01&gt;\n        &lt;PID02 /&gt;\n        &lt;PID03 /&gt;\n        &lt;PID04 /&gt;\n        &lt;PID05&gt;PLIERS 8 NEEDLE NOSE&lt;/PID05&gt;\n      &lt;/PID&gt;\n    &lt;/Loop&gt;\n  &lt;/Loop&gt;\n  &lt;Loop LoopId=&quot;CTT&quot; Name=&quot;&quot;&gt;\n    &lt;CTT&gt;\n      &lt;CTT01&gt;2&lt;/CTT01&gt;\n    &lt;/CTT&gt;\n    &lt;AMT&gt;\n      &lt;!--Amount Qualifier Code--&gt;\n      &lt;AMT01&gt;TT&lt;/AMT01&gt;\n      &lt;!--Monetary Amount--&gt;\n      &lt;AMT02&gt;758.75&lt;/AMT02&gt;\n      &lt;!--Credit/Debit Flag Code--&gt;\n      &lt;AMT03&gt;C&lt;/AMT03&gt;\n    &lt;/AMT&gt;\n  &lt;/Loop&gt;\n  &lt;SE&gt;\n    &lt;!--Number of Included Segments--&gt;\n    &lt;SE01&gt;13&lt;/SE01&gt;\n    &lt;!--Transaction Set Control Number--&gt;\n    &lt;SE02&gt;0001&lt;/SE02&gt;\n  &lt;/SE&gt;\n&lt;/Transaction&gt;\n&lt;GE&gt;\n  &lt;!--Number of Transaction Sets Included--&gt;\n  &lt;GE01&gt;1&lt;/GE01&gt;\n  &lt;!--Group Control Number--&gt;\n  &lt;GE02&gt;68&lt;/GE02&gt;\n&lt;/GE&gt;</code></pre>\n\n&lt;/FunctionGroup&gt;\r<br />\n  &lt;IEA&gt;<br />\n<pre><code>&lt;!--Number of Included Functional Groups--&gt;\n&lt;IEA01&gt;1&lt;/IEA01&gt;\n&lt;!--Interchange Control Number--&gt;\n&lt;IEA02&gt;000000068&lt;/IEA02&gt;</code></pre>\n\n&lt;/IEA&gt;\r<br />\n&lt;/Interchange&gt;\r<br />\n<br />\nIf I want to test doing an XML to EDI transformation I can then take do the following: \r<br />\n<br />\nC:\\X12\\Release&gt;TransformToX12.exe samplefile.xml samplefileOut.edi\r<br />\n<br />\nThat transforms the XML file back into the following: \r<br />\nISA<em>00</em>          <em>00</em>          <em>12</em>1111111111     <em>01<em>111111111      <em>130227</em>1235</em>U<em>00403</em>000000068</em>0<em>P</em>&gt;\r<br />\nGS<em>PO<em>111111111</em>111111111</em>20130227<em>1235</em>68<em>X<em>004030VICS\r<br />\nST</em>850<em>0001\r<br />\nBEG<em>00</em>SA</em>XX-1234<em><em>19980301</em>AE123\r<br />\nN1</em>ST<em>John Doe\r<br />\nN2<em>Division 1\r<br />\nN3</em>1000 Park Avenue\r<br />\nN4<em>New York<em>NY</em>10610\r<br />\nPO1</em>1<em>25</em>EA</em>9.5<em>CT</em>MG<em>XYZ-1234\r<br />\nPID<em>F</em></em></em><em>HAMMER-CLAW\r<br />\nPO1<em>2</em>75<em>EA<em>6.95</em>CT</em>MG<em>L505-123\r<br />\nPID</em>F</em>*<em><em>PLIERS 8 NEEDLE NOSE\r<br />\nCTT<em>2\r<br />\nAMT</em>TT<em>758.75<em>C\r<br />\nSE</em>13</em>0001\r<br />\nGE<em>1</em>68\r<br />\nIEA</em>1</em>000000068\r<br />\n<br />\nComparing the original input file to the new output file we can see that the data files match up. \r<br />\n<br />\nNow that we have seen that process work full flow, you should be able to clear the output data from the XML file and you can map your own data into it. (Assuming that you are looking to map into a purchase order file. If there is some other X12 file that you are trying to process you could repeat the same process that I illustrated above. <br />\n",
    "PostedDate": "2013-02-27T17:38:32.62-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1008266",
    "ThreadId": "434660",
    "Html": "To create X12 from scratch, you can look at an example unit test here <a href=\"http://x12parser.codeplex.com/SourceControl/changeset/view/20228#151876\" rel=\"nofollow\">http://x12parser.codeplex.com/SourceControl/changeset/view/20228#151876</a>.\r<br />\nEventually there will be a documentation page explaining this.\r<br />\n<br />\nThe advantages of using the parser for this is that it will automatically count your segments to place in the trailing segements SE, GE and IEA.\r<br />\nIt will also check your segments against the spec to make sure they are allowed and it will cleanup any empty elements at the end of your segments.\r<br />\n<br />\nFor some of the segments, there are strongly typed classes that have the names of each elements in the segment.<br />\n",
    "PostedDate": "2013-02-28T08:06:44.183-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1008283",
    "ThreadId": "434660",
    "Html": "stevenacollins and dstrubhar:\r<br />\nThank you! It's delighting to see active communities replying here! Most importantly, this project x12parser provides great coverage be it in documentation or the codes. Very well documented! Thanks from me and kudos to all the contributors/developers! Would certainly be happy to play a part by contributing if I could in near future.\r<br />\n<br />\ndstrubhar:\r<br />\nI did found out the sample unit test provided with the package after I posted this message. The closest example that could well resembles to what I need (I'll be generating EDI for invoice-810) is PurchaseOrderCreationTester.cs. However, the sample were not quite complete as in the element &quot;N1&quot; is not available. Is there any reason? I guess adding a new segment will do the trick? Sorry if I am demanding too much but I'll test and play around trying it out (hopefully I could extend my duetime). But really, thanks alot! It has solved a major of my headache.<br />\n",
    "PostedDate": "2013-02-28T08:23:33.103-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1008313",
    "ThreadId": "434660",
    "Html": "I can add N1Segment for the next release, let me know which other ones you need that are missing.<br />\n",
    "PostedDate": "2013-02-28T09:16:33.697-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1009765",
    "ThreadId": "434660",
    "Html": "Wow, that's awesome dstubhar! I tried to search for the elements and found out below that are missing:\r<br />\n<br />\nHeader\r<br />\nBIG - Beginning record\r<br />\nN1 - Name\r<br />\nN2 - Additional name\r<br />\nFOB - F.O.B Related instructions\r<br />\nITD - Terms of sale\r<br />\nDTM - Date/Time Reference\r<br />\n<br />\nDetail\r<br />\nIT1 - Line Item Information\r<br />\nCTP - Pricing Information\r<br />\nPID - Item Description\r<br />\n<br />\nSummary\r<br />\nTDS - Total Monetary Amount\r<br />\nTXI - Tax information\r<br />\nCAD - Carrier Details\r<br />\nSAC - Service, Promotion, Allowance or Charge Information\r<br />\nCTT - Transaction Totals\r<br />\nISS - Invoice Shipment Summary\r<br />\nSE - Transaction Set Trailer\r<br />\n<br />\nPlease let me know if there is anyway I could help.\r<br />\n<br />\nThanks.\r<br />\n<br />\nWarm Regards,\r<br />\nEK<br />\n",
    "PostedDate": "2013-03-04T01:03:27.94-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1011809",
    "ThreadId": "434660",
    "Html": "I have checked in an implementation of these segments.\r<br />\nThe sample unit test for creation is here: <a href=\"http://x12parser.codeplex.com/SourceControl/changeset/view/23465#367671\" rel=\"nofollow\">http://x12parser.codeplex.com/SourceControl/changeset/view/23465#367671</a>.\r<br />\n<br />\nI may also add a few more segments that you have not listed before a do a release.\r<br />\n<br />\nPID and IT1 can be treated as either a loop or a segment, but it has to follow the way it was defined in the specification, so make sure you use TypedLoopIT1 or TypedLoopPID when the spec defines it as a loop.<br />\n",
    "PostedDate": "2013-03-07T07:27:31.2-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]